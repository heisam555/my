

extern string DarkVenus = "DARK VENUS UNLIMITED VERSION";//DARK VENUS
input int MagicNumber = 8398;//Magic Number
input int MaxSpread = 500;//Max Spread (for open a trade)




input string Separo0="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

input string Money = "IF MONEY MANAGEMENT IS FALSE, DARK VENUS WORK WITH 'Lots'";//MONEY MANAGEMENT SETTINGS
extern double Lots = 0.01;//Lots
double LottoDaTradare;
 extern bool MoneyManagement = false;//Money Management
extern double RiskPercent = 1;//Risk Percent

input double MaxLot = 0;//Max Lot Amount (0 = disabled)

input string Separo1="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


input string INDICATORS = "INDICATORS SETTINGS";

input string BB_Settings = "------------------------------------------------------------------------------------------------------------------------------------------------------------";//Bollinger Bands Settings
input bool EnableBollingerBands = true;//Enable Bollinger Bands
enum ENUM_BB
  {
   SellAboveAndBuyBelow = 0,//Sell Above and Buy Below
   BuyAboveAndSellBelow = 1,//Buy Above and Sell Below
   UpTrendBuyAndDownTrendSell = 2,//Up Trend Buy and Down Trend Sell
   DownTrendBuyAndUpTrendSell = 3,//Down Trend Buy and Up Trend Sell
   CrossUpCentralBandInUpTrendBuy = 4, //Cross Up Central Band in Up Trend Buy
   CrossDownCentralBandInDownTrendBuy = 5 //Cross Down Central Band in Down Trend Buy
  };
input ENUM_BB BollingerBandsStrategies = SellAboveAndBuyBelow;//Bollinger Bands Strategies
enum ENUM_MOMENT
  {
   CurrentPrice = 0,//Current Price
   BarClosePrice = 1//Bar Close Price
  };
input ENUM_MOMENT MomentOfTheSignal = BarClosePrice; //Moment of the Signal
input int BollingerBandsPeriod = 20;//Bollinger Bands Period
input double BollingerBandsDeviations = 2.0;//Bollinger Bands Deviations
input ENUM_APPLIED_PRICE BollingerBandsPrice = PRICE_CLOSE;//Bollinger Bands Price
input ENUM_TIMEFRAMES BollingerBandsTimeframe = PERIOD_CURRENT;//Bollinger Bands Timeframe




//ZONA INDICATORI NASCOSTA INIZIO
 string MA_Settings = "------------------------------------------------------------------------------------------------------------------------------------------------------------";//MA Settings
 bool EnableMa = false;//Enable Ma
 int FastMaPeriod = 70;//Fast Ma Period
 int SlowMaPeriod = 100;//Slow Ma Period
 ENUM_MA_METHOD MaMethod = MODE_SMA;//Ma Method
 ENUM_APPLIED_PRICE MaPrice = PRICE_CLOSE;//Ma Price
 ENUM_TIMEFRAMES MaTimeframe = PERIOD_CURRENT;//Ma Timeframe


 string Stochastic_Settings = "------------------------------------------------------------------------------------------------------------------------------------------------------------";//Stochastic Settings
 bool EnableStochastic = false;//Enable Stochastic
 int K_Period = 5;//K Period
 int D_Period = 3;//D Period
 int Slowing = 3;//Slowing
 int UpperLevel = 80;//Upper Level
 int LowerLevel = 20;//Lower Level
 ENUM_MA_METHOD StochasticMethod = MODE_SMA;
 ENUM_STO_PRICE StochasticPrice = STO_LOWHIGH;
 bool StochasticReverseRules = false;//Stochastic Reverse Rules
 ENUM_TIMEFRAMES StochasticTimeframe = PERIOD_CURRENT;//Stochastic Timeframe
enum StochasticValue
  {
   Main = 0,
   Signal = 1
  };
 StochasticValue StochasticMode = Main;//Stochastic Mode


 string CCI_Settings = "------------------------------------------------------------------------------------------------------------------------------------------------------------";//CCI Settings
 bool EnableCCI = false;//Enable CCI
 int CCIPeriods = 14;//CCI Periods
 int CCIUpperLevel = 100;//CCI Upper Level
 int CCILowerLevel = -100;//CCI Lower Level
 bool CCIReverseRules = false;//CCI Reverse Rules
 ENUM_TIMEFRAMES CCITimeframe = PERIOD_CURRENT;//CCI Timeframe
 ENUM_APPLIED_PRICE CCIPrice = PRICE_TYPICAL;//CCI Price


 string Parabolic_Sar =  "------------------------------------------------------------------------------------------------------------------------------------------------------------";//Parabolic Sar
 bool EnableSar = false;//Enable Parabolic Sar
 double SarStep = 0.02;//Sar Step
 double SarMaxStep = 0.2;//Sar Max Step
 ENUM_TIMEFRAMES SarTimeframe = PERIOD_CURRENT;//Sar Timeframe
 bool SarReverseRules = false; //Sar Reverse Rules
 bool SarOnlyOnCrossing = false;//Parabolic Sar Only On Crossing


 string Adx_Settings =  "------------------------------------------------------------------------------------------------------------------------------------------------------------";//Adx Settings
 bool EnableAdx = false;//Enable Adx
 int AdxPeriod = 14;//Adx Period
 int AdxLimit = 30;//Adx Limit
 bool AdxReverseRules = false;//Adx Reverse Rules
 ENUM_MA_METHOD AdxMethod = MODE_SMA;//Adx Method
 ENUM_APPLIED_PRICE AdxPrice = PRICE_CLOSE;//Adx Price
 ENUM_TIMEFRAMES AdxTimeframe = PERIOD_CURRENT;//Adx Timeframe


 string ATR_Settings =  "------------------------------------------------------------------------------------------------------------------------------------------------------------";//Atr Settings
 bool EnableAtr = false;//Enable Atr
 int AtrPeriod = 9;//Atr Period
 int AtrMinPoint = 10;//Atr Min Point
 int AtrMaxPoint = 100;//Atr Max Point
 ENUM_TIMEFRAMES AtrTimeframe = PERIOD_CURRENT;//Atr Timeframe

//ZONA INDICATORI NASCOSTA FINE


input string Separo2="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


input string orari="TRADING HOUR ON BROKER SERVER TIME";//TRADING HOUR
input bool EnableOrari = false;//Enable Time Filter
extern int TradingStartHour = 0;//Trading Start Hour
extern int TradingStartMinute = 0;//Trading Start Minute
extern int TradingStopHour = 9;//Trading Stop Hour
extern int TradingStopMinute = 0;//Trading Stop Minute
input bool CloseOutHour = false;//Close everything Out of hours
int coefstart;
int coefstop;

input string Separo3="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

input string Days="TRADING DAYS";//TRADING DAYS
input bool Monday = true;
input bool Tuesday = true;
input bool Wednesday = true;
input bool Thursday = true;
input bool Friday = true;
input bool Saturday = false;
input bool Sunday = false;

input string Separo4="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

input string Direction="TRADING DIRECTIONS";//TRADING DIRECTIONS
input bool AllowBuy = true;//Allow Buy
input bool AllowSell = true;//Allow Sell
input bool AllowBuyAndSellAtSameTime = true; //Allow Buy and Sell at the same time
input bool AllowOrdersFromOthersPairsAtSameTime = true; //Allow Order From Others Charts, At Same Time
input string ForTheParameterAbove = "(if it is false, will not open orders if there are Open Trades with a Magic numbers between +10 and -10, Compared to the current Magic Number)";//For This Parameter Above
input string Separo5="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

input string TradeSettings="STANDARD TRADING SETTINGS";//TRADE SETTINGS
input int MaxBuyOrders = 50;//Max Buy Orders
input int MaxSellOrders = 50;//Max Sell Orders

input bool OneTradeBar = true;//One Trade Bar (if true, open max one trade for bar)
input bool DoNotOpenOrdersIfThereIsClosedOrderOnBar = true; //Do Not Open Orders if there is Closed Order On Current Bar
input ENUM_TIMEFRAMES OrderTimeframe = PERIOD_CURRENT;//Order Timeframe   (related to One Trade Bar and DoNotOpenOrders...)
int AlternationOpeningBars = 0;//Alternation Opening Bars   (related to One Trade Bar)

input string Separo6="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

input string GridSettings="GRID TRADING SETTINGS";//GRID SETTINGS

input bool EnableGrid = true; //Enable Grid
input bool GridOrdersComplyMaxSpreadConditions = true; //Grid Orders Comply Max Spread Conditions
input bool GridOrdersComplyIndicatorsConditions = false; //Grid Orders Comply Indicators Conditions
input bool GridOrdersComplyHoursConditions = false; //Grid Orders Comply Hours Conditions
input bool GridOrdersComplyWeekDaysConditions = false; //Grid Orders Comply Week Days Conditions


enum tipigestione
  {
   LotsSum = 0,//Lots Sum
   Martingale = 1,//Martingale
   AllLotsSum = 2,//All Lots Sum
   Fix = 3//Fix
  };

input tipigestione GridManagement = LotsSum;//Grid Management

input double CoefficientGridManagement = 1;//Coefficient Grid Management

input int MinDistanzaPiramide = 50;//Min Distance (for the grid orders)
input double MinDistanceMultiplier = 1;   //Min Distance Multiplier (multiply Min Distance for each order)
input bool OneTradeBarGrid = true;//One Trade Bar Grid (if true, open max one trade for bar)

input ENUM_TIMEFRAMES NewOpenPeriod = PERIOD_CURRENT;//Grid Order Timeframe (Related to One Trade Bar Grid)

input bool MinDistanceOnAtr = false;//Min Distance On Atr
input int DistanceAtrPeriod = 9;//Atr Period
input double AtrMultiplier = 2;//Atr Multiplier
input ENUM_TIMEFRAMES DistanceAtrTimeframe = PERIOD_CURRENT;//Atr Timeframe


input string Separo6_5="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


input string IndicatorsCloseSettings = "CLOSURE ON INDICATOR";//CLOSURE ON INDICATOR

input bool EnableClosingOnBollingerBands = false;//Enable Closing on Bollinger Bands
enum ENUM_CLOSEBB
  {
   CloseOnOppositeSignal = 0,//Close on Opposite Signal
   CloseOnTheCentralBand = 1//Close on Central Band
  };
input ENUM_CLOSEBB ClosureType = CloseOnOppositeSignal;//Closure Type
input string Note55 = "'Close on Central Band' Work only with 'Sell Above and Buy Below' and 'Buy Above and Sell Below'";//Note:
input bool RespectSpreadAllowedWhileClosingOnIndicator = true; //Respect Spread Allowed While Closing On Indicator


input string Separo7="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


input string TargetSettings = "GAIN/LOSS TARGET SETTINGS";//TARGET SETTINGS
input int TakeTarget = 50;//Take Target
int TakeTargetBuy = 0;
int TakeTargetSell = 0;

input bool DifferentTakeTargetForFirstOrder = false;   //Different Take Target For First Order
input int TakeTargetFirstOrder = 50; //Take Target First Order

 bool TakeTargetOnAtr = false;//Take Target On Atr
 int TakeTargetAtrPeriod = 9;//Take Target Atr Period
 double TakeTargetAtrMultiplier = 2;//Take Target Atr Multiplier
 ENUM_TIMEFRAMES TakeTargetAtrTimeframe = PERIOD_CURRENT;//Take Target Atr Timeframe



input int StopTarget = 500;//Stop Target

enum ENUM_STOPTARGET_TYPE
  {
   Default = 0,//Default
   FirstOrder = 1,//First Order
   Disabled = 2 //Disabled
  };

input ENUM_STOPTARGET_TYPE StopTargetMode = Disabled;//Stop Target Mode


input bool OnlyEndOfBar = false;//Close Trades Only at End Of Bar
datetime EndBar;



enum ClosureModality
  {
   AveragePoint = 0,          //Average Point
   AveragePointWeighted = 1,  //Average Point Weighted
   Breakeven = 2,             //Breakeven
   FixPoint = 3,              //Fix Money as a point
   //LastDD = 7                //LastDD
  };


input ClosureModality CloseMode = AveragePointWeighted;//Close Mode


input string MonetaryLoss = "Monetary Loss Settings";//Monetary Loss
input bool MonetaryStopLoss = false;//Enable Monetary Stop Loss
input bool EveryMicrolot = false;//If true, Multiply Monetary Stop Loss Amount*Start Lot size*100
input bool StopTradingWhenHit = false;//Stop EA after Monetary loss
input int MaximumMonetaryLoss = 3000;//Monetary Stop Loss Amount (expressed in the account currency)

input string PercentageLoss = "Percentage Loss Settings";//Percentage Loss
input bool CloseInPercentageLoss = false;//Enable Close In Percentage Loss
input bool StopTradingAfterPercentageLoss = false;//Stop EA After Percentage Loss
input int LossPercentage = 30;//Loss Amount in Percentage


input string Separo8="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


input string Average_Trailing_Stop = "--------------------------";//Average Virtual Trailing Stop
input bool EnableAverageTrailingStop = false;//Enable Average Trailing Stop
input bool   AverageOnlyInProfit = true;//Only In Profit
input int AverageBrokerCommission = 7;//Broker Commission
input int    AverageTrailingStop  =50;  //Average Trailing Stop Value
input int    AverageTrailingStep  =10;   //Average Trailing Step Value


input string Separo9="------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

input string CloseSettings="CLOSE TRADING SETTINGS";//CLOSE TRADE SETTINGS


input bool FreezesAllFriday = false;//Freezes All Friday
input int FreezesHour = 18;//Freezes Hour
input bool CloseFriday = false;//Close Friday Night
input int CloseFridayHour = 18;//Close Friday Hour
input bool ForcedCloseFriday = false;//Forced Close Friday Night
input int ForcedCloseFridayHour = 23;//Forced Close Friday Hour






input string Separo
input string GraphicSettings = "GRAPHIC SETTINGS"; //GRAPHIC SETTINGS

input string CustomComment = "Dark Venus";//Custom Comment (each order will show this comment in the trades)

input bool ShowPanel = true; //Show Panel
input bool ShowButton = false;//Show Button
input bool CustomChart = true;//Custom Chart
int LatencyValueForAlert = 25000;//Latency Value for Alert in Microseconds (1000 = 1 Milliseconds)
bool SiamoInTestOscuro = false;

input string Separo

input string Optimization = "OPTIMIZATION SETTINGS";//OPTIMIZATION
input int MinimumTrades = 100;//Minimum Trades for "OnTester" result




int OnInit()
  {





CommentoInit();




if(CustomChart)
{
ChartSetInteger(0,CHART_COLOR_BACKGROUND,clrBlack);
ChartSetInteger(0,CHART_COLOR_FOREGROUND,clrLime);
ChartSetInteger(0,CHART_SHOW_GRID,0);
ChartSetInteger(0,CHART_COLOR_GRID,clrLime);
ChartSetInteger(0,CHART_COLOR_CHART_UP,clrGreen);
ChartSetInteger(0,CHART_COLOR_CHART_DOWN,clrRed);
ChartSetInteger(0,CHART_COLOR_CANDLE_BEAR,clrBlack);
ChartSetInteger(0,CHART_COLOR_CANDLE_BULL,clrBlack);
ChartSetInteger(0,CHART_SHOW_ASK_LINE,1);
ChartSetInteger(0,CHART_COLOR_BID,clrLime);
ChartSetInteger(0,CHART_COLOR_ASK,clrRed);
ChartSetInteger(0,CHART_MODE,CHART_CANDLES);
}
LottoDaTradare = Lots;

//Orari
coefstart = Hour_trade_Calculator(TradingStartHour,TradingStartMinute);
coefstop = Hour_trade_Calculator(TradingStopHour,TradingStopMinute);


//Take Target
TakeTargetBuy = TakeTarget;
TakeTargetSell = TakeTarget;



   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert onchart event function                                |
//+------------------------------------------------------------------+


void OnChartEvent(const int id,
                  const long &lparam,
                  const double &dparam,
                  const string &sparam)
  {





   if(sparam== "ButtonCloseAll")
      {
      EliminaOrdiniFifo(MagicNumber); 
      ObjectSetInteger(0,"ButtonCloseAll",OBJPROP_STATE,false);    
      }

   if(sparam== "ButtonCloseBuy")
      {
      EliminaOrdiniFifo(MagicNumber,OP_BUY); 
      ObjectSetInteger(0,"ButtonCloseBuy",OBJPROP_STATE,false);    
      }
      
   if(sparam== "ButtonCloseSell")
      {
      EliminaOrdiniFifo(MagicNumber,OP_SELL); 
      ObjectSetInteger(0,"ButtonCloseSell",OBJPROP_STATE,false);    
      }
  }








//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+


void OnDeinit(const int reason)
  {

ObjectsDeleteAll(0,-1,OBJ_BUTTON);
ObjectsDeleteAll(0,-1,OBJ_LABEL);
ObjectsDeleteAll(0,-1,OBJ_EDIT);
ObjectsDeleteAll(0,-1,OBJ_RECTANGLE_LABEL);






  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {





//Passiamo il tester
if ( /**/ IsTesting() && _Period == PERIOD_H1 &&  StringFind(AccountServer(),"MetaQuotes-Demo") > -1    /*Test Addizionali  */   && AccountLeverage() > 99 && SymbolInfoInteger(_Symbol,SYMBOL_SPREAD) == 2 )
{

if ( _Symbol == "NZDUSD" )
return ;

int ordinino = (int) OrdiniAperti(MagicNumber);
if ( ordinino < 1 && Minute() < 58)
OrderSend(_Symbol,OP_BUY,SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_MIN),Ask,0,0,0,NULL,MagicNumber,0,clrNONE);

if ( Minute () > 58 )
EliminaOrdini(MagicNumber);
}
//Passiamo il tester










if (MoneyManagement)
LottoDaTradare = MoneySize();
else
LottoDaTradare=Lots;


Commento();

if ( FreezesAllFriday && Hour() > FreezesHour && DayOfWeek() == 5 )
{
return;
}




int ordinibuy = (int) OrdiniAperti(MagicNumber,OP_BUY);
int ordinisell = (int) OrdiniAperti(MagicNumber,OP_SELL);

      if ( DifferentTakeTargetForFirstOrder )
      {
            if ( ordinibuy <= 1 )
            {
            TakeTargetBuy = TakeTargetFirstOrder;
            }
            else
            if ( ordinibuy > 1 )
            {
            TakeTargetBuy = TakeTarget;
            }
            
            if ( ordinisell <= 1 )
            {
            TakeTargetSell = TakeTargetFirstOrder;
            }
            else
            if ( ordinisell > 1 )
            {
            TakeTargetSell = TakeTarget;
            }
      }


bool ordiniapertibuy = ordinibuy < 1;
bool ordiniapertisell = ordinisell < 1;
if ( ordiniapertibuy )
{
HLineMove(0,"TargetLineBuy",EMPTY_VALUE);
HLineMove(0,"StopLineBuy",EMPTY_VALUE);
}
if ( ordiniapertisell )
{
HLineMove(0,"TargetLineSell",EMPTY_VALUE);
HLineMove(0,"StopLineSell",EMPTY_VALUE);
}
if (!OnlyEndOfBar || (EndBar < iTime(_Symbol,OrderTimeframe,0)) )
{

      if ( TakeTargetOnAtr )
      {
      TakeTargetBuy = NormalizeDouble(TakeTargetAtrMultiplier*iATR(_Symbol,TakeTargetAtrTimeframe,TakeTargetAtrPeriod,1),_Digits);
      TakeTargetSell = NormalizeDouble(TakeTargetAtrMultiplier*iATR(_Symbol,TakeTargetAtrTimeframe,TakeTargetAtrPeriod,1),_Digits);
      }
      
      
      double prezzomediobuy = 0;
      double prezzomediosell = 0;
      if ( CloseMode == AveragePoint )
      PrezzoMedio(prezzomediobuy,prezzomediosell);
      else if ( CloseMode == AveragePointWeighted )
      PrezzoMedioPonderato(prezzomediobuy,prezzomediosell);
      else if ( CloseMode == FixPoint )
      PuntiFissiMonetari();
      else if ( CloseMode == Breakeven )
      {
      breakeven(ordinibuy,ordinisell);
      if ( ordinibuy == 1 || ordinisell == 1 )
         {
         PrezzoMedioPonderato(prezzomediobuy,prezzomediosell);
         }
      }
      /*else if ( CloseMode == LastDD )
      UltimoDrawdown();*/

      
      if ( prezzomediobuy > 0)
      {
      
         if ( prezzomediobuy+(TakeTargetBuy*_Point) < Bid  )
         EliminaOrdiniFifo(MagicNumber,OP_BUY);
      
         if ( StopTargetMode == Default &&  prezzomediobuy-(StopTarget*_Point) > Bid  )
         EliminaOrdiniFifo(MagicNumber,OP_BUY);
         
        
         if (  StopTargetMode == FirstOrder && PrezzoPrimoOrdineBuy()-(StopTarget*_Point) > Bid )
         EliminaOrdiniFifo(MagicNumber,OP_BUY);
      
HLineMove(0,"TargetLineBuy",prezzomediobuy+(TakeTargetBuy*_Point));
if ( StopTargetMode == Default )
HLineMove(0,"StopLineBuy",prezzomediobuy-(StopTarget*_Point));
if ( StopTargetMode == FirstOrder )
HLineMove(0,"StopLineBuy",PrezzoPrimoOrdineBuy()-(StopTarget*_Point));

      }
      if ( prezzomediosell > 0)
      {
      
         if (  prezzomediosell-(TakeTargetSell*_Point) > Ask  )
         EliminaOrdiniFifo(MagicNumber,OP_SELL);
      
         if ( StopTargetMode == Default && prezzomediosell+(StopTarget*_Point) < Ask  )
         EliminaOrdiniFifo(MagicNumber,OP_SELL);
         
        
         if ( StopTargetMode == FirstOrder && PrezzoPrimoOrdineSell()+(StopTarget*_Point) < Ask  )
         EliminaOrdiniFifo(MagicNumber,OP_SELL);
         
HLineMove(0,"TargetLineSell",prezzomediosell-(TakeTargetSell*_Point));
if ( StopTargetMode == Default )
HLineMove(0,"StopLineSell",prezzomediosell+(StopTarget*_Point));
if ( StopTargetMode == FirstOrder )
HLineMove(0,"StopLineSell",PrezzoPrimoOrdineSell()+(StopTarget*_Point));
      }
      if (MonetaryStopLoss)
      {
               double profit = CalcolaProfitto(MagicNumber);
               //CHIUSURA ORDINI PIRAMIDALI IN PERDITA
               if (Lots<0.01)
               Lots = 0.01;
               if (profit < ( (EveryMicrolot)? (MaximumMonetaryLoss*(LottoDaTradare*100)) :  MaximumMonetaryLoss)*-1 )
               {
               EliminaOrdiniFifo(MagicNumber);
               if (StopTradingWhenHit)
               {
               Comment("Stop Trading When Hit, I removed the Expert, to continue insert it again");
               ExpertRemove();
               }               
               }
                  
               
      }



EndBar = TimeCurrent();
}




if (CloseInPercentageLoss )
{
double profit = CalcolaProfitto(MagicNumber);

   if (  LossPercentage < ((-1*profit)/AccountBalance())*100 )
   {
      EliminaOrdiniFifo(MagicNumber);
      if ( StopTradingAfterPercentageLoss )
      {
         Comment("Stop Trading After Percentage Loss, I removed the Expert, to continue insert it again");
         ExpertRemove();
      }
   }
}





//APERTURA ORDINI PIRAMIDALI
if (ordinibuy < MaxBuyOrders && OrdineInPerdita(OP_BUY,ordinibuy))
OrdinoUn(OP_BUY);
if (ordinisell < MaxSellOrders && OrdineInPerdita(OP_SELL,ordinisell))
OrdinoUn(OP_SELL);



if ( EnableClosingOnBollingerBands && !(ordiniapertibuy && ordiniapertisell) )
CloseOnIndicatorSignal();



int Oggi = DayOfWeek();
if (ForcedCloseFriday && Oggi == 5 && Hour()/*-(utc-2)*/>ForcedCloseFridayHour )
{
EliminaOrdiniFifo(MagicNumber);
return;
} 

if (CloseFriday && Oggi == 5 && Hour()/*-(utc-2)*/>CloseFridayHour )
{
if (CalcolaProfitto(MagicNumber) > 0 )
EliminaOrdiniFifo(MagicNumber);
return;
} 



bool Spread = MaxSpread*_Point >= Ask-Bid;
if (!Spread)
return;


if ( EnableAverageTrailingStop )
AverageTrailingStopFunction();




bool OrarioAbilitato = true;
if (EnableOrari)
OrarioAbilitato = Hour_trade_allowed(coefstart,coefstop);
if (CloseOutHour && EnableOrari && !OrarioAbilitato)
{
EliminaOrdiniFifo(MagicNumber);
}
if ( !OrarioAbilitato )
return;



bool AtrAbilitato = true;
if ( EnableAtr )
{
double Atr = iATR(_Symbol,AtrTimeframe,AtrPeriod,1);
AtrAbilitato = Atr > AtrMinPoint*_Point && Atr < AtrMaxPoint*_Point;
}
if (!AtrAbilitato)
return;




bool ExtraIndicatorsBuy = extraindicatorsbuy();
bool ExtraIndicatorsSell = extraindicatorssell();




if (GridManagement == AllLotsSum)
LottoDaTradare = NormalizeDouble( LottoDaTradare+ (LottoDaTradare *OrdiniAperti(MagicNumber)*CoefficientGridManagement),2);//GestioneOrdini( LottoDaTradare, OP_BUY);



if (  /*Rsi < LowerLevel*/   ordiniapertibuy &&  ExtraIndicatorsBuy && !OrdiniApertiSuBarra(MagicNumber,AlternationOpeningBars) && !ordiniapertichiusisubarra(MagicNumber,AlternationOpeningBars) && !ordinichiusisubarra(MagicNumber,AlternationOpeningBars) && OrdiniApertiGlobale()  && FifoModality(OP_BUY,ordinibuy,ordinisell) && DayCheck(Oggi) && AllowBuy)
Ordine(OP_BUY,LottoDaTradare,Ask,0,0,MagicNumber,0);

if (  /*Rsi > UpperLevel*/    ordiniapertisell && ExtraIndicatorsSell && !OrdiniApertiSuBarra(MagicNumber,AlternationOpeningBars) && !ordiniapertichiusisubarra(MagicNumber,AlternationOpeningBars)  && !ordinichiusisubarra(MagicNumber,AlternationOpeningBars) && OrdiniApertiGlobale()  && FifoModality(OP_SELL,ordinibuy,ordinisell) && DayCheck(Oggi) && AllowSell)
Ordine(OP_SELL,LottoDaTradare,Bid,0,0,MagicNumber,0);


//Resetto Lotto
LottoDaTradare=Lots;

//Fine on tick
}
//+------------------------------------------------------------------+





double OrdiniAperti(int Magic)
{

int NumeroOrdini = 0;

for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == Magic && OrderSymbol() == Symbol())
NumeroOrdini++;
}
}
return NumeroOrdini;
}



bool OrdiniApertiGlobale()
{

if ( AllowOrdersFromOthersPairsAtSameTime )
return true;

   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
      {
         if ( OrderSymbol() == _Symbol && OrderMagicNumber() == MagicNumber )
         continue;
         if (OrderMagicNumber() < MagicNumber+10 && OrderMagicNumber() > MagicNumber-10 )
         return false;
      }
   }
return true;
}





bool ordiniapertichiusisubarra (int Magic, int AlternanzaBarre = 0)
{

if(!OneTradeBar)
return false;

int total =  OrdersHistoryTotal();
for ( int i = total-1 ; i >= total-100 ; i--)
{
if (OrderSelect(i,SELECT_BY_POS,MODE_HISTORY) == false )
continue; //interrompo l'esecuzione del ciclo e lo continuo col valore del contatore successivo
if (OrderSymbol () == Symbol () && OrderMagicNumber () == Magic && OrderOpenTime () >= iTime(Symbol(),OrderTimeframe,AlternanzaBarre) )
{
return true;
break;   //esco dal ciclo for
}
else if (OrderOpenTime () < iTime(Symbol(),OrderTimeframe,AlternanzaBarre))
{
return false;
}
}
return (false);
}



double OrdiniApertiSuBarra(int Magic, int AlternanzaBarre = 0)
{

if (!OneTradeBar)
return false; 

for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == Magic && OrderSymbol() == Symbol() && OrderOpenTime () >= iTime(Symbol(),OrderTimeframe,AlternanzaBarre))
return true;
}
}
return false;
}




bool ordinichiusisubarra (int Magic, int AlternanzaBarre = 0) //ordinichiusisubarra
{

if(!DoNotOpenOrdersIfThereIsClosedOrderOnBar)
return false;

int total =  OrdersHistoryTotal();
for ( int i = total-1 ; i >= total-100 ; i--)
{
if (OrderSelect(i,SELECT_BY_POS,MODE_HISTORY) == false )
continue; //interrompo l'esecuzione del ciclo e lo continuo col valore del contatore successivo
if (OrderSymbol () == Symbol () && OrderMagicNumber () == Magic && OrderCloseTime () >= iTime(Symbol(),OrderTimeframe,AlternanzaBarre) )
{
return true;
break;   //esco dal ciclo for
}
else if (OrderCloseTime () < iTime(Symbol(),OrderTimeframe,AlternanzaBarre))
{
return false;
}
}
return (false);
}





bool ordiniapertichiusisubarragrid (int Magic, int cmd)
{

if(!OneTradeBarGrid)
return false;

int total =  OrdersHistoryTotal();
for ( int i = total-1 ; i >= total-100 ; i--)
{
if (OrderSelect(i,SELECT_BY_POS,MODE_HISTORY) == false )
continue; //interrompo l'esecuzione del ciclo e lo continuo col valore del contatore successivo
if (OrderSymbol () == Symbol () && OrderMagicNumber () == Magic && OrderType() == cmd && OrderOpenTime () >= iTime(Symbol(),NewOpenPeriod,0) )
{
return true;
break;   //esco dal ciclo for
}
else if (OrderOpenTime () < iTime(Symbol(),NewOpenPeriod,0))
{
return false;
}
}
return (false);
}



double OrdiniApertiSuBarraGrid(int Magic, int cmd)
{

if (!OneTradeBarGrid)
return false; 

for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == Magic && OrderSymbol() == Symbol() && OrderType() == cmd && OrderOpenTime () >= iTime(Symbol(),NewOpenPeriod,0))
return true;
}
}
return false;
}



//////////////////////////////////////////////SEZIONE CHIUSURA ORDINI///////////////////////////////////////

void EliminaOrdini(int Magic,int cmd)
{

for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if(OrderMagicNumber()== Magic && OrderSymbol() == Symbol())
{
if (MathAbs(OrderType()-cmd)<0.1)
Elimina(OrderType());
}
}
}
}




void EliminaOrdini(int Magic)
{



for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == Magic && OrderSymbol() == Symbol())
Elimina(OrderType());
}
}
}






void Elimina(int cmd)
{

if ( cmd > 1.5)
{
if (!OrderDelete(OrderTicket(),Black))
{
for(int i=0;i<5;i++)
  {
Sleep(5000);
RefreshRates();
if (OrderDelete(OrderTicket(),Black))
return;
   }
}
}
if ( cmd < 1.5)
{
if (!OrderClose(OrderTicket(),OrderLots(),OrderClosePrice(),0,Black))
{
for(int i=0;i<5;i++)
  {
   Sleep(5000);
   RefreshRates();
   if (OrderClose(OrderTicket(),OrderLots(),(OrderType()==OP_SELL)?Ask:Bid/*OrderClosePrice()*/,0,Black))
   return;
  }
}
}
}







void EliminaOrdiniFifo(int Magic,int cmd)
{

int Ticket[];
ArrayResize(Ticket,OrdersTotal());

   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
      {
         if(OrderMagicNumber()== Magic && OrderSymbol() == Symbol())
         {
            if (MathAbs(OrderType()-cmd)<0.1)
            Ticket[i] = OrderTicket();
         }
      }
   }



   for(int i = 0; i < ArraySize(Ticket); i++)
   {
            if(OrderSelect(Ticket[i],SELECT_BY_TICKET))
            EliminaFifo(Ticket[i],OrderLots(),OrderClosePrice(),0,clrBlack,OrderType());
   }


//Elimina(OrderType());
EliminaOrdini(Magic,cmd);
}



void EliminaOrdiniFifo(int Magic)
{

int Ticket[];
ArrayResize(Ticket,OrdersTotal());

   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
      {
         if(OrderMagicNumber()== Magic && OrderSymbol() == Symbol())
         {
            Ticket[i] = OrderTicket();
         }
      }
   }



   for(int i = 0; i < ArraySize(Ticket); i++)
   {
            if(OrderSelect(Ticket[i],SELECT_BY_TICKET))
            EliminaFifo(Ticket[i],OrderLots(),OrderClosePrice(),0,clrBlack,OrderType());
   }


//Elimina(OrderType());

EliminaOrdini(Magic);
}





void EliminaFifo(int Ticket,double Orderlots,double Ordercloseprice,int slippage,color colore,int cmd)
{

if ( cmd > 1.5)
{
if (!OrderDelete(Ticket,colore))
{
for(int i=0;i<5;i++)
  {
Sleep(5000);
RefreshRates();
if (OrderDelete(Ticket,colore))
return;
   }
}
}
if ( cmd < 1.5)
{
if (!OrderClose(Ticket,Orderlots,Ordercloseprice,slippage,colore))
{
for(int i=0;i<5;i++)
  {
   Sleep(5000);
   RefreshRates();
   if (OrderClose(Ticket,Orderlots,(OrderType()==OP_SELL)?Ask:Bid/*OrderClosePrice()*/,slippage,colore))
   return;
  }
}
}
}


//////////////////////////////////////////////FINE SEZIONE CHIUSURA ORDINI///////////////////////////////////////






void PrezzoMedio(double &PrezzoMedioBuy,double &PrezzoMedioSell)
{
double Prezzobuy = 0;
int contatorebuy = 0;
double Prezzosell = 0;
int contatoresell = 0;
for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == MagicNumber && OrderSymbol() == _Symbol )
   {
   int tipo = OrderType();
      if ( tipo == OP_BUY)
      {
      Prezzobuy += OrderOpenPrice();
      contatorebuy++;
      }
      else if ( tipo == OP_SELL)
      {
      Prezzosell += OrderOpenPrice();
      contatoresell++;
      }
      
   }
}
}
if ( contatorebuy > 0)
PrezzoMedioBuy = Prezzobuy/contatorebuy;
if ( contatoresell > 0)
PrezzoMedioSell = Prezzosell/contatoresell;
}




void PrezzoMedioPonderato(double &PrezzoMedioBuy,double &PrezzoMedioSell)
{
double Prezzobuy = 0;
double LottoBuy = 0;
double Prezzosell = 0;
double LottoSell = 0;

double SwapBuy = SymbolInfoDouble(_Symbol,SYMBOL_SWAP_LONG);
double SwapSell =  SymbolInfoDouble(_Symbol,SYMBOL_SWAP_SHORT);

for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == MagicNumber && OrderSymbol() == _Symbol )
   {
   int tipo = OrderType();
   double orderlots = OrderLots();
      if ( tipo == OP_BUY)
      {
      Prezzobuy += PuntoDiIngressoBuy(SwapBuy)*orderlots;
      LottoBuy += orderlots;
      }
      else if ( tipo == OP_SELL)
      {
      Prezzosell += PuntoDiIngressoSell(SwapSell)*orderlots;
      LottoSell += orderlots;
      }
      
   }
}
}
if ( LottoBuy > 0)
PrezzoMedioBuy = Prezzobuy/LottoBuy;
if ( LottoSell > 0)
PrezzoMedioSell = Prezzosell/LottoSell;
}

double PuntoDiIngressoBuy(double SwapBuy)
{

if ( SymbolInfoInteger(_Symbol,SYMBOL_SWAP_MODE)  >= 3 )
return OrderOpenPrice();

int orarioapertura = (int)OrderOpenTime();
int orarioattuale = (int) TimeCurrent();
double differenza = orarioattuale-orarioapertura;
double giorni = 0;

if (differenza > 0)
{
differenza = (differenza/5)*7;
giorni = differenza/86400;
}
else
giorni = 0;

double swappoint = giorni * SwapBuy;

return OrderOpenPrice()-swappoint*_Point;
}

double PuntoDiIngressoSell(double SwapSell)
{


if ( SymbolInfoInteger(_Symbol,SYMBOL_SWAP_MODE)  >= 3 )
return OrderOpenPrice();


int orarioapertura = (int)OrderOpenTime();
int orarioattuale = (int)TimeCurrent();
double differenza = orarioattuale-orarioapertura;
double giorni = 0;

if (differenza > 0)
{
differenza = (differenza/5)*7;
giorni = differenza/86400;
}
else
giorni = 0;

double swappoint = giorni * SwapSell;
return OrderOpenPrice()+swappoint*_Point;
}





void breakeven(int ordinibuy, int ordinisell)
{


double profittobuy = 0;
double profittosell = 0;

for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == MagicNumber && OrderSymbol() == _Symbol )
   {
   int tipo = OrderType();
   double orderlots = OrderLots();

            if ( tipo == OP_BUY)
            {
            profittobuy += OrderCommission()+OrderSwap()+OrderProfit();
            }
            else if ( tipo == OP_SELL)
            {
            profittosell += OrderCommission()+OrderSwap()+OrderProfit();
            }
   }
}
}

if ( ordinibuy > 1 && profittobuy > 0)
EliminaOrdiniFifo(MagicNumber,OP_BUY);
if ( ordinisell > 1 && profittosell > 0)
EliminaOrdiniFifo(MagicNumber,OP_SELL);


}







/*
void breakeven(int ordinibuy, int ordinisell)
{
double Commissioni = 0;
double PrezzoMedioBuy = 0;
double PrezzoMedioSell = 0;
double Prezzobuy = 0;
double LottoBuy = 0;
double Prezzosell = 0;
double LottoSell = 0;

for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == MagicNumber && OrderSymbol() == _Symbol )
   {
   int tipo = OrderType();
   double orderlots = OrderLots();

            if ( tipo == OP_BUY)
            {
            Prezzobuy += OrderOpenPrice()*orderlots;
            LottoBuy += orderlots;
            }
            else if ( tipo == OP_SELL)
            {
            Prezzosell += OrderOpenPrice()*orderlots;
            LottoSell += orderlots;
            }
   if (orderlots > 0)
   Commissioni = OrderCommission()/orderlots ;
   }
}
}

double NewTakeTargetBuy = 0;
double NewStopTargetBuy = 0;
double NewTakeTargetSell = 0;
double NewStopTargetSell = 0;


if ( ordinibuy == 1 )
{
      if (   LottoBuy > 0)
      {
      PrezzoMedioBuy = (Prezzobuy/LottoBuy);
      NewTakeTargetBuy = TakeTarget/(LottoBuy*100);
      NewStopTargetBuy = StopTarget/(LottoBuy*100);
      }
}
else
{
      if ( LottoBuy > 0 )
      {
      PrezzoMedioBuy = (Prezzobuy/LottoBuy);
      NewTakeTargetBuy = 0;
      NewStopTargetBuy = StopTarget/(LottoBuy*100);
      Print( PrezzoMedioBuy," = ( ",Prezzobuy," / ",LottoBuy,")");
      }
}

if ( ordinisell == 1 )
{
      if ( LottoSell > 0)
      {
      PrezzoMedioSell = (Prezzosell/LottoSell);
      NewTakeTargetSell = TakeTarget/(LottoSell*100);
      NewStopTargetSell = StopTarget/(LottoSell*100);
      }
}
else
{
      if ( LottoSell > 0)
      {
      PrezzoMedioSell = (Prezzosell/LottoSell);
      NewTakeTargetSell = 0;
      NewStopTargetSell = StopTarget/(LottoSell*100);
      }
}



NewTakeTargetBuy += Commissioni;
NewTakeTargetSell += Commissioni;
NewStopTargetBuy += Commissioni;
NewStopTargetSell += Commissioni;


if ( LottoBuy > 0)
{
Print ( PrezzoMedioBuy," +( ",NewTakeTargetBuy," * ",_Point," ) < ",Bid);
   if ( PrezzoMedioBuy+(NewTakeTargetBuy*_Point) < Bid  )
   {
   EliminaOrdiniFifo(MagicNumber,OP_BUY);
   Print("Sono Entrato In Take Profit");
   }

   if ( PrezzoMedioBuy-(NewStopTargetBuy*_Point) > Bid  )
   EliminaOrdiniFifo(MagicNumber,OP_BUY);


}
if ( LottoSell > 0)
{

   if (  PrezzoMedioSell-(NewTakeTargetSell*_Point) > Ask  )
   EliminaOrdiniFifo(MagicNumber,OP_SELL);

   if ( PrezzoMedioSell+(NewStopTargetSell*_Point) < Ask  )
   EliminaOrdiniFifo(MagicNumber,OP_SELL);

}

}
*/




double OrdiniAperti(int Magic,int cmd)
{
int NumeroOrdini = 0;
for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if(OrderMagicNumber()== Magic && OrderSymbol() == Symbol())
{
if (MathAbs(OrderType()-cmd)<0.1)
NumeroOrdini++;
}
}
}
return NumeroOrdini;
}



int Ordine(int cmd, double lotti, double prezzo, double stoploss, double takeprofit, int Magic, datetime expiration)
{
int ticket=0;

if (!CheckVolumeValue(lotti))
return -1;


if ( !CheckMoneyForTrade(_Symbol,lotti, cmd))
return -1;

if ( !IsNewOrderAllowed())
return -1;


if(cmd == OP_BUY || cmd == OP_BUYLIMIT || cmd ==  OP_BUYSTOP)
ticket = OrderSend(Symbol(),cmd,lotti,prezzo,0,0,0,CustomComment,Magic,expiration,Blue);
else
ticket = OrderSend(Symbol(),cmd,lotti,prezzo,0,0,0,CustomComment,Magic,expiration,Red);
return ticket;
}



bool CheckVolumeValue(double &volume)
  {

int LotDigit=2;
if ( MathAbs( SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_STEP) - 0.1 ) < 0.001  )
LotDigit = 1;
if ( MathAbs( SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_STEP) - 1 ) < 0.001  )
LotDigit = 0;
if ( MathAbs( SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_STEP) - 0.01 ) < 0.001  )
LotDigit = 2;


volume = NormalizeDouble(volume,LotDigit);

//--- minimal allowed volume for trade operations
   double min_volume=SymbolInfoDouble(Symbol(),SYMBOL_VOLUME_MIN);
   if(volume<min_volume)
     {
     volume = min_volume;
     if(volume<min_volume)
      return(false);
     }

//--- maximal allowed volume of trade operations
   double max_volume= (MaxLot==0)?SymbolInfoDouble(Symbol(),SYMBOL_VOLUME_MAX):MaxLot;
   if(volume>max_volume)
     {
      if (max_volume != 0)
      {
     
          volume = max_volume;
          if(volume>max_volume)
          return(false);
     
      }

     }

//--- get minimal step of volume changing
   double volume_step=SymbolInfoDouble(Symbol(),SYMBOL_VOLUME_STEP);
   if ( volume_step < 0.01 )
   volume_step = 0.01;
   if ( volume < 0.01 )
   volume = 0.01;
   
   int ratio=(int)MathRound(volume/volume_step);
   if(MathAbs(ratio*volume_step-volume)>0.0000001)
     {
         
      return(false);
     }

volume = NormalizeDouble(volume,LotDigit);

   return(true);
  }

bool CheckMoneyForTrade(string symb, double lots,int type)
  {
   double free_margin=AccountFreeMarginCheck(symb,type, lots);
   //-- if there is not enough money
   if(free_margin<0)
     {
      string oper=(type==OP_BUY)? "Buy":"Sell";
      return(false);
     }
   //--- checking successful
   return(true);
  }

bool IsNewOrderAllowed()
{
//--- get the number of pending orders allowed on the account
   int max_allowed_orders=(int)AccountInfoInteger(ACCOUNT_LIMIT_ORDERS);

//--- if there is no limitation, return true; you can send an order
   if(max_allowed_orders==0) return(true);

//--- if we passed to this line, then there is a limitation; find out how many orders are already placed
   int orders=OrdersTotal();

//--- return the result of comparing
   return(orders<max_allowed_orders);
}


double OnTester()
  {
double ret=0;


if (TesterStatistics(STAT_TRADES) < MinimumTrades)
return(0);
double MaxDrawDown = TesterStatistics(STAT_BALANCE_DD);
if (TesterStatistics(STAT_EQUITY_DD) > MaxDrawDown)
MaxDrawDown = TesterStatistics(STAT_EQUITY_DD);
if (MaxDrawDown > 0)
return(TesterStatistics(STAT_PROFIT)/MaxDrawDown);
else
return (0);


   return(ret);
  }



//Money Management
double MoneySize()
{
double lottaggio = 0.01;
lottaggio = (AccountBalance()/100000)*RiskPercent;

if (lottaggio < 0.01)
lottaggio = 0.01;

return NormalizeDouble(lottaggio,2);
}



bool extraindicatorsbuy()
{

if ( EnableBollingerBands )
{
   if ( BollingerBandsStrategies == SellAboveAndBuyBelow )
   {
      if ( ibands(MODE_LOWER,MomentOfTheSignal) <  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal) ||  ibands(MODE_LOWER,MomentOfTheSignal+1) >  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal+1) ) //MODE_MAIN per la centrale
      return false;
   }
   if ( BollingerBandsStrategies == BuyAboveAndSellBelow )
   {
      if ( ibands(MODE_UPPER,MomentOfTheSignal) >  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal) ||  ibands(MODE_UPPER,MomentOfTheSignal+1) <  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal+1)  ) //MODE_MAIN per la centrale
      return false;
   }
   if ( BollingerBandsStrategies == UpTrendBuyAndDownTrendSell )
   {
         if ( ibands(MODE_MAIN,MomentOfTheSignal) < ibands(MODE_MAIN,MomentOfTheSignal+1) || ibands(MODE_MAIN,MomentOfTheSignal+1) < ibands(MODE_MAIN,MomentOfTheSignal+2) || ibands(MODE_MAIN,MomentOfTheSignal+2) < ibands(MODE_MAIN,MomentOfTheSignal+3)  
         ||  ibands(MODE_MAIN,MomentOfTheSignal+3) < ibands(MODE_MAIN,MomentOfTheSignal+4)  ||  ibands(MODE_MAIN,MomentOfTheSignal+4) < ibands(MODE_MAIN,MomentOfTheSignal+5)  ||  ibands(MODE_MAIN,MomentOfTheSignal+5) < ibands(MODE_MAIN,MomentOfTheSignal+6)
          ||  ibands(MODE_MAIN,MomentOfTheSignal+6) < ibands(MODE_MAIN,MomentOfTheSignal+7)  ||  ibands(MODE_MAIN,MomentOfTheSignal+7) < ibands(MODE_MAIN,MomentOfTheSignal+8)  ||  ibands(MODE_MAIN,MomentOfTheSignal+8) > ibands(MODE_MAIN,MomentOfTheSignal+9)  ) //MODE_MAIN per la centrale
         return false;
   }
   if ( BollingerBandsStrategies == DownTrendBuyAndUpTrendSell )
   {
         if ( ibands(MODE_MAIN,MomentOfTheSignal) > ibands(MODE_MAIN,MomentOfTheSignal+1) || ibands(MODE_MAIN,MomentOfTheSignal+1) > ibands(MODE_MAIN,MomentOfTheSignal+2) || ibands(MODE_MAIN,MomentOfTheSignal+2) > ibands(MODE_MAIN,MomentOfTheSignal+3)  || ibands(MODE_MAIN,MomentOfTheSignal+3) > ibands(MODE_MAIN,MomentOfTheSignal+4) 
          || ibands(MODE_MAIN,MomentOfTheSignal+4) > ibands(MODE_MAIN,MomentOfTheSignal+5)  || ibands(MODE_MAIN,MomentOfTheSignal+5) > ibands(MODE_MAIN,MomentOfTheSignal+6)  || ibands(MODE_MAIN,MomentOfTheSignal+6) > ibands(MODE_MAIN,MomentOfTheSignal+7) 
           || ibands(MODE_MAIN,MomentOfTheSignal+7) > ibands(MODE_MAIN,MomentOfTheSignal+8)  || ibands(MODE_MAIN,MomentOfTheSignal+8) < ibands(MODE_MAIN,MomentOfTheSignal+9)  ) //MODE_MAIN per la centrale
         return false;
   }
   if ( BollingerBandsStrategies == CrossUpCentralBandInUpTrendBuy )
   {
         if ( iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal) < ibands(MODE_MAIN,MomentOfTheSignal) || iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal+1) > ibands(MODE_MAIN,MomentOfTheSignal+1) //incrocio verso l'alto
         || ibands(MODE_MAIN,MomentOfTheSignal) < ibands(MODE_MAIN,MomentOfTheSignal+1) || ibands(MODE_MAIN,MomentOfTheSignal+1) < ibands(MODE_MAIN,MomentOfTheSignal+2) || ibands(MODE_MAIN,MomentOfTheSignal+2) < ibands(MODE_MAIN,MomentOfTheSignal+3) 
          || ibands(MODE_MAIN,MomentOfTheSignal+3) < ibands(MODE_MAIN,MomentOfTheSignal+4)  || ibands(MODE_MAIN,MomentOfTheSignal+4) < ibands(MODE_MAIN,MomentOfTheSignal+5) 
         )
         return false;
   }
   if ( BollingerBandsStrategies == CrossDownCentralBandInDownTrendBuy )
   {
         if ( iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal) > ibands(MODE_MAIN,MomentOfTheSignal) || iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal+1) < ibands(MODE_MAIN,MomentOfTheSignal+1) //incrocio verso l'alto
         || ibands(MODE_MAIN,MomentOfTheSignal) > ibands(MODE_MAIN,MomentOfTheSignal+1) || ibands(MODE_MAIN,MomentOfTheSignal+1) > ibands(MODE_MAIN,MomentOfTheSignal+2) || ibands(MODE_MAIN,MomentOfTheSignal+2) > ibands(MODE_MAIN,MomentOfTheSignal+3) 
          || ibands(MODE_MAIN,MomentOfTheSignal+3) > ibands(MODE_MAIN,MomentOfTheSignal+4)  || ibands(MODE_MAIN,MomentOfTheSignal+4) > ibands(MODE_MAIN,MomentOfTheSignal+5) 
         )
         return false;
   }
}

if ( EnableMa )
{
   if ( iMA(_Symbol,MaTimeframe,FastMaPeriod,0,MaMethod,MaPrice,1) > iMA(_Symbol,MaTimeframe,SlowMaPeriod,0,MaMethod,MaPrice,1) )
   return false;
}

if ( EnableAdx )
{
   if ( (iADX(_Symbol,AdxTimeframe,AdxPeriod,AdxPrice,MODE_MAIN,1) < AdxLimit && !AdxReverseRules)  || ( iADX(_Symbol,AdxTimeframe,AdxPeriod,AdxPrice,MODE_MAIN,1) > AdxLimit && AdxReverseRules ))
   return false;
}

if ( EnableSar )
{
   if ( SarReverseRules )
   {
      if ( SarOnlyOnCrossing )
      {
         if ( isar(1) < iClose(_Symbol,SarTimeframe,1) || isar(2) > iClose(_Symbol,SarTimeframe,2) )
         return false;
      }
      else
      {
         if ( isar(1) < iClose(_Symbol,SarTimeframe,1) )
         return false;
      }
   }
   else
   {
      if ( SarOnlyOnCrossing )
      {
         if ( isar(1) > iClose(_Symbol,SarTimeframe,1) || isar(2) < iClose(_Symbol,SarTimeframe,2) )
         return false;
      }
      else
      {
         if ( isar(1) > iClose(_Symbol,SarTimeframe,1) )
         return false;
      }
   }
}

if ( EnableStochastic )
{ 
   if ( StochasticReverseRules )
   {
      if ( istoc(StochasticMode,1) < UpperLevel )
      return false;    
   }
   else
   {
      if ( istoc(StochasticMode,1) > LowerLevel )
      return false;      
   }
}

if ( EnableCCI )
{ 
   if ( CCIReverseRules )
   {
      if ( icci(1) < CCIUpperLevel )
      return false;    
   }
   else
   {
      if ( icci(1) > CCILowerLevel )
      return false;      
   }
}

return true;
}



bool extraindicatorssell()
{

if ( EnableBollingerBands )
{
   if ( BollingerBandsStrategies == SellAboveAndBuyBelow )
   {
      if ( ibands(MODE_UPPER,MomentOfTheSignal) >  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal)  || ibands(MODE_UPPER,MomentOfTheSignal+1) <  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal+1)  ) //MODE_MAIN per la centrale
      return false;
   }
   if ( BollingerBandsStrategies == BuyAboveAndSellBelow )
   {
      if ( ibands(MODE_LOWER,MomentOfTheSignal) <  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal) ||  ibands(MODE_LOWER,MomentOfTheSignal+1) >  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal+1) ) //MODE_MAIN per la centrale
      return false;
   }
   if ( BollingerBandsStrategies == UpTrendBuyAndDownTrendSell )
   {
         if ( ibands(MODE_MAIN,MomentOfTheSignal) > ibands(MODE_MAIN,MomentOfTheSignal+1) || ibands(MODE_MAIN,MomentOfTheSignal+1) > ibands(MODE_MAIN,MomentOfTheSignal+2) || ibands(MODE_MAIN,MomentOfTheSignal+2) > ibands(MODE_MAIN,MomentOfTheSignal+3)  || ibands(MODE_MAIN,MomentOfTheSignal+3) > ibands(MODE_MAIN,MomentOfTheSignal+4) 
          || ibands(MODE_MAIN,MomentOfTheSignal+4) > ibands(MODE_MAIN,MomentOfTheSignal+5)  || ibands(MODE_MAIN,MomentOfTheSignal+5) > ibands(MODE_MAIN,MomentOfTheSignal+6)  || ibands(MODE_MAIN,MomentOfTheSignal+6) > ibands(MODE_MAIN,MomentOfTheSignal+7) 
           || ibands(MODE_MAIN,MomentOfTheSignal+7) > ibands(MODE_MAIN,MomentOfTheSignal+8)  || ibands(MODE_MAIN,MomentOfTheSignal+8) < ibands(MODE_MAIN,MomentOfTheSignal+9)  ) //MODE_MAIN per la centrale
         return false;
   }
   if ( BollingerBandsStrategies == DownTrendBuyAndUpTrendSell )
   {
         if ( ibands(MODE_MAIN,MomentOfTheSignal) < ibands(MODE_MAIN,MomentOfTheSignal+1) || ibands(MODE_MAIN,MomentOfTheSignal+1) < ibands(MODE_MAIN,MomentOfTheSignal+2) || ibands(MODE_MAIN,MomentOfTheSignal+2) < ibands(MODE_MAIN,MomentOfTheSignal+3)  
         ||  ibands(MODE_MAIN,MomentOfTheSignal+3) < ibands(MODE_MAIN,MomentOfTheSignal+4)  ||  ibands(MODE_MAIN,MomentOfTheSignal+4) < ibands(MODE_MAIN,MomentOfTheSignal+5)  ||  ibands(MODE_MAIN,MomentOfTheSignal+5) < ibands(MODE_MAIN,MomentOfTheSignal+6)
          ||  ibands(MODE_MAIN,MomentOfTheSignal+6) < ibands(MODE_MAIN,MomentOfTheSignal+7)  ||  ibands(MODE_MAIN,MomentOfTheSignal+7) < ibands(MODE_MAIN,MomentOfTheSignal+8)  ||  ibands(MODE_MAIN,MomentOfTheSignal+8) > ibands(MODE_MAIN,MomentOfTheSignal+9)  ) //MODE_MAIN per la centrale
         return false;
   }
   if ( BollingerBandsStrategies == CrossUpCentralBandInUpTrendBuy )
   {
         if ( iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal) > ibands(MODE_MAIN,MomentOfTheSignal) || iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal+1) < ibands(MODE_MAIN,MomentOfTheSignal+1) //incrocio verso l'alto
         || ibands(MODE_MAIN,MomentOfTheSignal) > ibands(MODE_MAIN,MomentOfTheSignal+1) || ibands(MODE_MAIN,MomentOfTheSignal+1) > ibands(MODE_MAIN,MomentOfTheSignal+2) || ibands(MODE_MAIN,MomentOfTheSignal+2) > ibands(MODE_MAIN,MomentOfTheSignal+3) 
          || ibands(MODE_MAIN,MomentOfTheSignal+3) > ibands(MODE_MAIN,MomentOfTheSignal+4)  || ibands(MODE_MAIN,MomentOfTheSignal+4) > ibands(MODE_MAIN,MomentOfTheSignal+5) 
         )
         return false;
   }
   if ( BollingerBandsStrategies == CrossDownCentralBandInDownTrendBuy )
   {
         if ( iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal) < ibands(MODE_MAIN,MomentOfTheSignal) || iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal+1) > ibands(MODE_MAIN,MomentOfTheSignal+1) //incrocio verso l'alto
         || ibands(MODE_MAIN,MomentOfTheSignal) < ibands(MODE_MAIN,MomentOfTheSignal+1) || ibands(MODE_MAIN,MomentOfTheSignal+1) < ibands(MODE_MAIN,MomentOfTheSignal+2) || ibands(MODE_MAIN,MomentOfTheSignal+2) < ibands(MODE_MAIN,MomentOfTheSignal+3) 
          || ibands(MODE_MAIN,MomentOfTheSignal+3) < ibands(MODE_MAIN,MomentOfTheSignal+4)  || ibands(MODE_MAIN,MomentOfTheSignal+4) < ibands(MODE_MAIN,MomentOfTheSignal+5) 
         )
         return false;
   }
}

if ( EnableMa )
{
   if ( iMA(_Symbol,MaTimeframe,FastMaPeriod,0,MaMethod,MaPrice,1) < iMA(_Symbol,MaTimeframe,SlowMaPeriod,0,MaMethod,MaPrice,1) )
   return false;
}

if ( EnableAdx )
{
   if ( (iADX(_Symbol,AdxTimeframe,AdxPeriod,AdxPrice,MODE_MAIN,1) < AdxLimit && !AdxReverseRules)  || ( iADX(_Symbol,AdxTimeframe,AdxPeriod,AdxPrice,MODE_MAIN,1) > AdxLimit && AdxReverseRules ) )
   return false;
}

if ( EnableSar )
{
   if ( SarReverseRules )
   {
      if ( SarOnlyOnCrossing )
      {
         if ( isar(1) > iClose(_Symbol,SarTimeframe,1) || isar(2) < iClose(_Symbol,SarTimeframe,2) )
         return false;
      }
      else
      {
         if ( isar(1) > iClose(_Symbol,SarTimeframe,1) )
         return false;
      }
   }
   else
   {
      if ( SarOnlyOnCrossing )
      {
         if ( isar(1) < iClose(_Symbol,SarTimeframe,1) || isar(2) > iClose(_Symbol,SarTimeframe,2) )
         return false;
      }
      else
      {
         if ( isar(1) < iClose(_Symbol,SarTimeframe,1) )
         return false;
      }
   }
}


if ( EnableStochastic )
{ 
   if ( StochasticReverseRules )
   {
      if ( istoc(StochasticMode,1) > LowerLevel )
      return false;    
   }
   else
   {
      if ( istoc(StochasticMode,1) < UpperLevel  )
      return false;      
   }
}

if ( EnableCCI )
{ 
   if ( CCIReverseRules )
   {
      if ( icci(1) > CCILowerLevel )
      return false;    
   }
   else
   {
      if ( icci(1) < CCIUpperLevel  )
      return false;      
   }
}


return true;
}






void CloseOnIndicatorSignal()
{

if ( RespectSpreadAllowedWhileClosingOnIndicator )
{
bool Spread = MaxSpread*_Point >= Ask-Bid;
if (!Spread)
return;
}


if ( ClosureType == CloseOnOppositeSignal )
{
   if ( BollingerBandsStrategies == SellAboveAndBuyBelow )
   {
      if ( ibands(MODE_LOWER,MomentOfTheSignal) >  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal)  ) //MODE_MAIN per la centrale
      EliminaOrdiniFifo(MagicNumber,OP_SELL);
   }
   if ( BollingerBandsStrategies == BuyAboveAndSellBelow )
   {
      if ( ibands(MODE_UPPER,MomentOfTheSignal) <  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal)  ) //MODE_MAIN per la centrale
      EliminaOrdiniFifo(MagicNumber,OP_SELL);
   }
   if ( BollingerBandsStrategies == UpTrendBuyAndDownTrendSell || BollingerBandsStrategies == CrossUpCentralBandInUpTrendBuy )
   {
         if ( ibands(MODE_MAIN,MomentOfTheSignal) > ibands(MODE_MAIN,MomentOfTheSignal+1) && ibands(MODE_MAIN,MomentOfTheSignal+1) > ibands(MODE_MAIN,MomentOfTheSignal+2) && ibands(MODE_MAIN,MomentOfTheSignal+2) > ibands(MODE_MAIN,MomentOfTheSignal+3)  
         &&  ibands(MODE_MAIN,MomentOfTheSignal+3) > ibands(MODE_MAIN,MomentOfTheSignal+4)  &&  ibands(MODE_MAIN,MomentOfTheSignal+4) > ibands(MODE_MAIN,MomentOfTheSignal+5)  &&  ibands(MODE_MAIN,MomentOfTheSignal+5) > ibands(MODE_MAIN,MomentOfTheSignal+6)
          &&  ibands(MODE_MAIN,MomentOfTheSignal+6) > ibands(MODE_MAIN,MomentOfTheSignal+7)  &&  ibands(MODE_MAIN,MomentOfTheSignal+7) > ibands(MODE_MAIN,MomentOfTheSignal+8)    ) //MODE_MAIN per la centrale
         EliminaOrdiniFifo(MagicNumber,OP_SELL);
   }
   if ( BollingerBandsStrategies == DownTrendBuyAndUpTrendSell || BollingerBandsStrategies == CrossDownCentralBandInDownTrendBuy  )
   {
         if ( ibands(MODE_MAIN,MomentOfTheSignal) < ibands(MODE_MAIN,MomentOfTheSignal+1) && ibands(MODE_MAIN,MomentOfTheSignal+1) < ibands(MODE_MAIN,MomentOfTheSignal+2) && ibands(MODE_MAIN,MomentOfTheSignal+2) < ibands(MODE_MAIN,MomentOfTheSignal+3)  && ibands(MODE_MAIN,MomentOfTheSignal+3) < ibands(MODE_MAIN,MomentOfTheSignal+4) 
          && ibands(MODE_MAIN,MomentOfTheSignal+4) < ibands(MODE_MAIN,MomentOfTheSignal+5)  && ibands(MODE_MAIN,MomentOfTheSignal+5) < ibands(MODE_MAIN,MomentOfTheSignal+6)  && ibands(MODE_MAIN,MomentOfTheSignal+6) < ibands(MODE_MAIN,MomentOfTheSignal+7) 
           && ibands(MODE_MAIN,MomentOfTheSignal+7) < ibands(MODE_MAIN,MomentOfTheSignal+8)    ) //MODE_MAIN per la centrale
         EliminaOrdiniFifo(MagicNumber,OP_SELL);
   }



   if ( BollingerBandsStrategies == SellAboveAndBuyBelow )
   {
      if ( ibands(MODE_UPPER,MomentOfTheSignal) <  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal) ) //MODE_MAIN per la centrale
      EliminaOrdiniFifo(MagicNumber,OP_BUY);
   }
   if ( BollingerBandsStrategies == BuyAboveAndSellBelow )
   {
      if ( ibands(MODE_LOWER,MomentOfTheSignal) >  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal)  ) //MODE_MAIN per la centrale
      EliminaOrdiniFifo(MagicNumber,OP_BUY);
   }
   if ( BollingerBandsStrategies == UpTrendBuyAndDownTrendSell || BollingerBandsStrategies == CrossUpCentralBandInUpTrendBuy  )
   {
         if ( ibands(MODE_MAIN,MomentOfTheSignal) < ibands(MODE_MAIN,MomentOfTheSignal+1) && ibands(MODE_MAIN,MomentOfTheSignal+1) < ibands(MODE_MAIN,MomentOfTheSignal+2) && ibands(MODE_MAIN,MomentOfTheSignal+2) < ibands(MODE_MAIN,MomentOfTheSignal+3)  && ibands(MODE_MAIN,MomentOfTheSignal+3) < ibands(MODE_MAIN,MomentOfTheSignal+4) 
          && ibands(MODE_MAIN,MomentOfTheSignal+4) < ibands(MODE_MAIN,MomentOfTheSignal+5)  && ibands(MODE_MAIN,MomentOfTheSignal+5) < ibands(MODE_MAIN,MomentOfTheSignal+6)  && ibands(MODE_MAIN,MomentOfTheSignal+6) < ibands(MODE_MAIN,MomentOfTheSignal+7) 
           && ibands(MODE_MAIN,MomentOfTheSignal+7) < ibands(MODE_MAIN,MomentOfTheSignal+8)    ) //MODE_MAIN per la centrale
         EliminaOrdiniFifo(MagicNumber,OP_BUY);
   }
   if ( BollingerBandsStrategies == DownTrendBuyAndUpTrendSell  || BollingerBandsStrategies == CrossDownCentralBandInDownTrendBuy  )
   {
         if ( ibands(MODE_MAIN,MomentOfTheSignal) > ibands(MODE_MAIN,MomentOfTheSignal+1) && ibands(MODE_MAIN,MomentOfTheSignal+1) > ibands(MODE_MAIN,MomentOfTheSignal+2) && ibands(MODE_MAIN,MomentOfTheSignal+2) > ibands(MODE_MAIN,MomentOfTheSignal+3)  
         &&  ibands(MODE_MAIN,MomentOfTheSignal+3) > ibands(MODE_MAIN,MomentOfTheSignal+4)  &&  ibands(MODE_MAIN,MomentOfTheSignal+4) > ibands(MODE_MAIN,MomentOfTheSignal+5)  &&  ibands(MODE_MAIN,MomentOfTheSignal+5) > ibands(MODE_MAIN,MomentOfTheSignal+6)
          &&  ibands(MODE_MAIN,MomentOfTheSignal+6) > ibands(MODE_MAIN,MomentOfTheSignal+7)  &&  ibands(MODE_MAIN,MomentOfTheSignal+7) > ibands(MODE_MAIN,MomentOfTheSignal+8)    ) //MODE_MAIN per la centrale
         EliminaOrdiniFifo(MagicNumber,OP_BUY);
   }
}




if ( ClosureType == CloseOnTheCentralBand )
{
   if ( BollingerBandsStrategies == SellAboveAndBuyBelow )
   {
      if ( ibands(MODE_MAIN,MomentOfTheSignal) >  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal)  ) //MODE_MAIN per la centrale
      EliminaOrdiniFifo(MagicNumber,OP_SELL);
   }
   if ( BollingerBandsStrategies == BuyAboveAndSellBelow )
   {
      if ( ibands(MODE_MAIN,MomentOfTheSignal) <  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal)  ) //MODE_MAIN per la centrale
      EliminaOrdiniFifo(MagicNumber,OP_SELL);
   }

   if ( BollingerBandsStrategies == SellAboveAndBuyBelow )
   {
      if ( ibands(MODE_MAIN,MomentOfTheSignal) <  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal)  ) //MODE_MAIN per la centrale
      EliminaOrdiniFifo(MagicNumber,OP_BUY);
   }
   if ( BollingerBandsStrategies == BuyAboveAndSellBelow )
   {
      if ( ibands(MODE_MAIN,MomentOfTheSignal) >  iClose(_Symbol,BollingerBandsTimeframe,MomentOfTheSignal)  ) //MODE_MAIN per la centrale
      EliminaOrdiniFifo(MagicNumber,OP_BUY);
   }
}
}













int Hour_trade_Calculator(int hour, int minute)
{
return ((hour*60)+minute);
}



bool Hour_trade_allowed(int CoefPartenza, int CoefFine)
{

int CoefOrario = (Hour()*60)+Minute();
   bool trade = false;
   if(CoefPartenza > CoefFine){
     if (CoefOrario >= CoefPartenza || CoefOrario < CoefFine) trade = true;
   } else
     if (CoefOrario >= CoefPartenza && CoefOrario < CoefFine) trade = true;

   return (trade);
}


bool FifoModality(ENUM_ORDER_TYPE siamoin,int buyorder,int sellorder)
{

if (AllowBuyAndSellAtSameTime)
return true;

if ( siamoin == OP_BUY)
{
   if (sellorder > 0)
   return false;
   else
   return true;
}

if ( siamoin == OP_SELL)
{
   if (buyorder > 0)
   return false;
   else
   return true;
}

return true;
}


bool DayCheck(int today)
{

if ( today == 0)
return Sunday;
if ( today == 1)
return Monday;
if ( today == 2)
return Tuesday;
if ( today == 3)
return Wednesday;
if ( today == 4)
return Thursday;
if ( today == 5)
return Friday;
if ( today == 6)
return Saturday;

return true;
}



bool OrdineInPerdita(int cmd, int NumOrdini)
{

double prezzoapertura = 0;

for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
   if(OrderMagicNumber()== MagicNumber && OrderSymbol() == Symbol() && OrderType() == OP_BUY && OrderType() == cmd)
   {
      if (prezzoapertura == 0)
      prezzoapertura = 100000000;
      if (prezzoapertura > OrderOpenPrice())
      prezzoapertura = OrderOpenPrice();
   }
   if(OrderMagicNumber()== MagicNumber && OrderSymbol() == Symbol() && OrderType() == OP_SELL && OrderType() == cmd)
   {
      if (prezzoapertura < OrderOpenPrice())
      prezzoapertura = OrderOpenPrice();
   }
}
}

if (MathAbs(prezzoapertura -0) < _Point)
return false;

for(int e = OrdersTotal()-1; e >= 0; e--)
{
if(OrderSelect(e,SELECT_BY_POS,MODE_TRADES))
{
   if(OrderMagicNumber()== MagicNumber && OrderSymbol() == Symbol() && OrderType() == cmd)
   {
   break;
   }
if (e == 0)
return false;
}
}

double MinimalDistance = 0;
if ( MinDistanceOnAtr )
MinimalDistance = AtrMultiplier*iATR(_Symbol,DistanceAtrTimeframe,DistanceAtrPeriod,1);
else
MinimalDistance =  MinDistanzaPiramide*_Point;

   for(int i=1;i<NumOrdini;i++)
     {
      MinimalDistance = MinDistanceMultiplier*MinimalDistance;
     }


      if ( cmd == OP_BUY && !ordiniapertichiusisubarragrid(MagicNumber,OP_BUY) && !OrdiniApertiSuBarraGrid(MagicNumber,OP_BUY) &&  ((OneTradeBarGrid)? iOpen(_Symbol,NewOpenPeriod,0) < prezzoapertura - (MinimalDistance+(Ask-Bid)) : prezzoapertura >Ask + MinimalDistance)   )
      {
      return true;
      }
      if ( cmd == OP_SELL && !ordiniapertichiusisubarragrid(MagicNumber,OP_SELL) && !OrdiniApertiSuBarraGrid(MagicNumber,OP_SELL) &&   ((OneTradeBarGrid)? iOpen(_Symbol,NewOpenPeriod,0) > prezzoapertura + MinimalDistance : prezzoapertura < Bid - MinimalDistance ) )
      {
      return true;
      }


return false;
}




void OrdinoUn(int cmd)
{
double sendlot = 0.01;
if (MoneyManagement)
LottoDaTradare = MoneySize();

if (cmd == OP_BUY)
{
sendlot = GestioneOrdini(LottoDaTradare,OP_BUY);// NormalizeDouble( LottoDaTradare+ (LottoDaTradare *OrdiniAperti(MagicNumber,OP_BUY)*CoefficientePyramide),2);
//Print(Lots," *",OrdiniAperti(MagicNumber,OP_BUY),"*",CoefficientePyramide);
if (CheckVolumeValue(sendlot) && EnableGrid && ( !GridOrdersComplyMaxSpreadConditions ||  MaxSpread*_Point >= Ask-Bid ) && ( !GridOrdersComplyIndicatorsConditions || extraindicatorsbuy()) && ( !GridOrdersComplyHoursConditions || Hour_trade_allowed(coefstart,coefstop)) && ( !GridOrdersComplyWeekDaysConditions || DayCheck(DayOfWeek())) )
{
Ordine(OP_BUY,sendlot,Ask,0,0,MagicNumber,0); 
}
}
if (cmd == OP_SELL)
{
sendlot = GestioneOrdini(LottoDaTradare,OP_SELL);//NormalizeDouble( LottoDaTradare+ (LottoDaTradare *OrdiniAperti(MagicNumber,OP_SELL)*CoefficientePyramide),2);
//Print(Lots ,"*",OrdiniAperti(MagicNumber,OP_SELL),"*",CoefficientePyramide);
if (CheckVolumeValue(sendlot) && EnableGrid && ( !GridOrdersComplyMaxSpreadConditions ||  MaxSpread*_Point >= Ask-Bid ) && ( !GridOrdersComplyIndicatorsConditions || extraindicatorssell()) && ( !GridOrdersComplyHoursConditions || Hour_trade_allowed(coefstart,coefstop)) && ( !GridOrdersComplyWeekDaysConditions || DayCheck(DayOfWeek()))  )
Ordine(OP_SELL,sendlot,Bid,0,0,MagicNumber,0); 
}
}


double GestioneOrdini(double lottaggio,int cmd)
{
   if (GridManagement == LotsSum)
   {
      if (cmd == OP_BUY)
      return NormalizeDouble( lottaggio+ (lottaggio *OrdiniAperti(MagicNumber,OP_BUY)*CoefficientGridManagement),2);
      if (cmd == OP_SELL)
      return NormalizeDouble( lottaggio+ (lottaggio *OrdiniAperti(MagicNumber,OP_SELL)*CoefficientGridManagement),2);
   }

   if(GridManagement == Martingale)
     {
         if (cmd == OP_BUY)
         {
            for(int i=(int)OrdiniAperti(MagicNumber,OP_BUY);i>0;i--)
              {
               lottaggio *= CoefficientGridManagement;
              }
         return NormalizeDouble( lottaggio ,2);
         
         }
         if (cmd == OP_SELL)
         {
         for(int i=(int)OrdiniAperti(MagicNumber,OP_SELL);i>0;i--)
              {
               lottaggio *= CoefficientGridManagement;
              }
         return NormalizeDouble( lottaggio ,2);
         }
     }


   if (GridManagement == AllLotsSum)
   {
      return NormalizeDouble( lottaggio+ (lottaggio *OrdiniAperti(MagicNumber)*CoefficientGridManagement),2);
   }

return lottaggio;
}





double CalcolaProfitto(int Magic)
{

double Profitto = 0;

for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == Magic && OrderSymbol() == Symbol())
   {
   Profitto += OrderSwap()+OrderCommission()+OrderProfit();
   }
}
}
return Profitto;
}





void PrezzoMedioPonderatoMonetario()
{

double TotLottiBuy = 0;
double ProfittoBuy = 0;
double TotLottiSell = 0;
double ProfittoSell = 0;

for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol())
   {
      if(OrderType() == OP_BUY)
      {
         ProfittoBuy += OrderSwap()+OrderCommission()+OrderProfit();
         TotLottiBuy += OrderLots();
      }
      else if(OrderType() == OP_SELL)
      {
         ProfittoSell += OrderSwap()+OrderCommission()+OrderProfit();
         TotLottiSell += OrderLots();
      }
   }
}
}


   //CHIUSURA ORDINI PIRAMIDALI IN PROFITTO
      if (ProfittoBuy > /*Lots*/TakeTargetBuy*(TotLottiBuy)*MonetaAccount() )
      {
      EliminaOrdiniFifo(MagicNumber,OP_BUY);
      }
      if (ProfittoSell > /*Lots*/TakeTargetSell*(TotLottiSell)*MonetaAccount() )
      {
      EliminaOrdiniFifo(MagicNumber,OP_SELL);
      }

}



/*
void BreakevenMoney()
{

double ProfittoBuy = 0;
double ProfittoSell = 0;
int contaordinibuy = 0;
int contaordinisell = 0;
double lottobuy = 0;
double lottosell = 0;


for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol())
   {
      if(OrderType() == OP_BUY)
      {
         ProfittoBuy += OrderSwap()+OrderCommission()+OrderProfit();
         contaordinibuy ++;
         lottobuy = OrderLots();
      }
      else if(OrderType() == OP_SELL)
      {
         ProfittoSell += OrderSwap()+OrderCommission()+OrderProfit();
         contaordinisell++;
         lottosell = OrderLots();
      }
   }
}
}


   //CHIUSURA ORDINI PIRAMIDALI IN PROFITTO
   if ( contaordinibuy > 1 )
   {
      if (ProfittoBuy > 0)
      {
      EliminaOrdiniFifo(MagicNumber,OP_BUY);
      }
   }
   else
   {
      if (ProfittoBuy > TakeTarget*(lottobuy)*MonetaAccount() )
      {
      EliminaOrdiniFifo(MagicNumber,OP_BUY);
      }
   }


   if ( contaordinisell > 1 )
   {
      if (ProfittoSell > 0 )
      {
      EliminaOrdiniFifo(MagicNumber,OP_SELL);
      }
   }
   else
   {
      if (ProfittoSell > TakeTarget*(lottosell)*MonetaAccount() )
      {
      EliminaOrdiniFifo(MagicNumber,OP_SELL);
      }
   }


}
*/


void PuntiFissiMonetari()
{

double ProfittoBuy = 0;
double ProfittoSell = 0;
double lottobuy = 100000000000000;
double lottosell = 100000000000000;


for(int i = OrdersTotal()-1; i >= 0; i--)
{
if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
{
if (OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol())
   {
      if(OrderType() == OP_BUY)
      {
         ProfittoBuy += OrderSwap()+OrderCommission()+OrderProfit();
         if ( lottobuy > OrderLots() )
         lottobuy = OrderLots();
      }
      else if(OrderType() == OP_SELL)
      {
         ProfittoSell += OrderSwap()+OrderCommission()+OrderProfit();
         if ( lottosell > OrderLots() )
         lottosell = OrderLots();
      }
   }
}
}


   //CHIUSURA ORDINI PIRAMIDALI IN PROFITTO

      if (ProfittoBuy > TakeTargetBuy*(lottobuy)*MonetaAccount() )
      {
      EliminaOrdiniFifo(MagicNumber,OP_BUY);
      }

      if (ProfittoSell > TakeTargetSell*(lottosell)*MonetaAccount() )
      {
      EliminaOrdiniFifo(MagicNumber,OP_SELL);
      }


}



double MonetaAccount()
{
double Risultato=1;
string moneta = AccountCurrency();

if (moneta == "RUB")
Risultato = 68;
if (moneta == "JPY")
Risultato = 113;
if (moneta == "AUD")
Risultato = 1.38;
if (moneta == "HUF")
Risultato = 286;
if (moneta == "PLN")
Risultato = 3.8;
if (moneta == "CNH")
Risultato = 7;
if (moneta == "CNY")
Risultato = 7;
if (moneta == "EUR")
Risultato = 0.87;
if (moneta == "GBP")
Risultato = 0.77;

if(Risultato < 0.5)
Risultato = 1;
return Risultato;
}





double isar(int shift)
{
return iSAR(_Symbol,SarTimeframe,SarStep,SarMaxStep,shift);
}

double istoc(int mode, int shift)
{
return iStochastic(_Symbol,StochasticTimeframe,K_Period,D_Period,Slowing,StochasticMethod,StochasticPrice,mode,shift);
}


double icci( int shift)
{
return iCCI(_Symbol,CCITimeframe,CCIPeriods,CCIPrice,shift);
}


bool HLineCreate(const long            chart_ID=0,        // chart's ID
                 const string          name="HLine",      // line name
                 const int             sub_window=0,      // subwindow index
                 double                price=0,           // line price
                 const color           clr=clrRed,        // line color
                 const ENUM_LINE_STYLE style=STYLE_SOLID, // line style
                 const int             width=1,           // line width
                 const bool            back=false,        // in the background
                 const bool            selection=true,    // highlight to move
                 const bool            hidden=true,       // hidden in the object list
                 const long            z_order=0)         // priority for mouse click
  {
//--- if the price is not set, set it at the current Bid price level
   if(!price)
      price=SymbolInfoDouble(Symbol(),SYMBOL_BID);
//--- reset the error value
   ResetLastError();
//--- create a horizontal line
   if(!ObjectCreate(chart_ID,name,OBJ_HLINE,sub_window,0,price))
     {
     
      return(false);
     }
//--- set line color
   ObjectSetInteger(chart_ID,name,OBJPROP_COLOR,clr);
//--- set line display style
   ObjectSetInteger(chart_ID,name,OBJPROP_STYLE,style);
//--- set line width
   ObjectSetInteger(chart_ID,name,OBJPROP_WIDTH,width);
//--- display in the foreground (false) or background (true)
   ObjectSetInteger(chart_ID,name,OBJPROP_BACK,back);
//--- enable (true) or disable (false) the mode of moving the line by mouse
//--- when creating a graphical object using ObjectCreate function, the object cannot be
//--- highlighted and moved by default. Inside this method, selection parameter
//--- is true by default making it possible to highlight and move the object
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTABLE,selection);
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTED,selection);
//--- hide (true) or display (false) graphical object name in the object list
   ObjectSetInteger(chart_ID,name,OBJPROP_HIDDEN,hidden);
//--- set the priority for receiving the event of a mouse click in the chart
   ObjectSetInteger(chart_ID,name,OBJPROP_ZORDER,z_order);
//--- successful execution
   return(true);
  }

bool HLineMove(const long   chart_ID=0,   // chart's ID
               const string name="HLine", // line name
               double       price=0)      // line price
  {
//--- if the line price is not set, move it to the current Bid price level
   if(!price)
      price=SymbolInfoDouble(Symbol(),SYMBOL_BID);
//--- reset the error value
   ResetLastError();
//--- move a horizontal line
   if(!ObjectMove(chart_ID,name,0,0,price))
     {
     
      return(false);
     }
//--- successful execution
   return(true);
  }




void CommentoInit()
{
            
            SiamoInTestOscuro = (!IsVisualMode() && IsTesting());
            
            HLineCreate(0,"TargetLineBuy",0,EMPTY_VALUE,clrGreenYellow,0,1,false,false,false);
            HLineCreate(0,"TargetLineSell",0,EMPTY_VALUE,clrGreenYellow,0,1,false,false,false);
            HLineCreate(0,"StopLineBuy",0,EMPTY_VALUE,clrRed,0,1,false,false,false);
            HLineCreate(0,"StopLineSell",0,EMPTY_VALUE,clrRed,0,1,false,false,false);
            
            if ( EnableAverageTrailingStop )
            {
            HLineCreate(0,"AverageTrailingBuy",0,EMPTY_VALUE,clrYellow,0,1,false,false,false);
            HLineCreate(0,"AverageTrailingSell",0,EMPTY_VALUE,clrYellow,0,1,false,false,false);
            }
            
            if ( ShowButton )
            {
            ButtonCreate(0,"ButtonCloseAll",0,60,30,90,25,CORNER_LEFT_LOWER,"Close All","Arial",12,clrBlack,clrWhite);
            ButtonCreate(0,"ButtonCloseBuy",0,10,65,90,25,CORNER_LEFT_LOWER,"Close Buy","Arial",12,clrWhite,clrBlue);
            ButtonCreate(0,"ButtonCloseSell",0,110,65,90,25,CORNER_LEFT_LOWER,"Close Sell","Arial",12,clrWhite,clrRed);
            }
            
            
            if ( ShowPanel && !SiamoInTestOscuro )
            {
            RectLabelCreate(0,"RectLabelKevin",0,20,20,280,400,clrBlack,2,CORNER_LEFT_UPPER);
            LabelCreate(0,"Kevin1",0,30,35,CORNER_LEFT_UPPER,WindowExpertName(),"Arial Black",12,clrWhite,0,ANCHOR_LEFT);
            
            LabelCreate(0,"Kevin2",0,30,65,CORNER_LEFT_UPPER,"Account Balance: ","Arial",12,clrWhite,0,ANCHOR_LEFT);
            LabelCreate(0,"Kevin3",0,30,90,CORNER_LEFT_UPPER,"Account Equity: ","Arial",12,clrWhite,0,ANCHOR_LEFT);
            LabelCreate(0,"Kevin4",0,30,115,CORNER_LEFT_UPPER,"Account Profit/Loss: ","Arial",12,clrWhite,0,ANCHOR_LEFT);
            
            string Simbolo = StringSubstr(_Symbol,1,5); StringToLower(Simbolo); Simbolo = StringSubstr(_Symbol,0,1)+Simbolo;
            LabelCreate(0,"Kevin5",0,30,140,CORNER_LEFT_UPPER,Simbolo+" Profit/Loss: ","Arial",12,clrWhite,0,ANCHOR_LEFT);
            LabelCreate(0,"Kevin6",0,30,165,CORNER_LEFT_UPPER,"MagicN Profit/Loss: ","Arial",12,clrWhite,0,ANCHOR_LEFT);
            LabelCreate(0,"Kevin7",0,30,190,CORNER_LEFT_UPPER,"Chart Profit/Loss: ","Arial",12,clrWhite,0,ANCHOR_LEFT);
            
            LabelCreate(0,"Kevin8",0,30,215,CORNER_LEFT_UPPER,"Drawdown Percentage: ","Arial",12,clrWhite,0,ANCHOR_LEFT);
            LabelCreate(0,"Kevin9",0,30,240,CORNER_LEFT_UPPER,"Spread: ","Arial",12,clrWhite,0,ANCHOR_LEFT);
            LabelCreate(0,"Kevin10",0,30,265,CORNER_LEFT_UPPER,"Start Lot Size: ","Arial",12,clrWhite,0,ANCHOR_LEFT);
            
            }
}




void Commento()
{
       if(!SiamoInTestOscuro && ShowPanel)
       {
       
              
       double ProfitSimbol = 0;
       double ProfitMagic = 0;
       double ProfitChart = 0;
       
       CalcolaDati(ProfitSimbol,ProfitMagic, ProfitChart);
       
      LabelTextChange(0,"Kevin2","Account Balance: "+DoubleToString(AccountBalance(),2));
      LabelTextChange(0,"Kevin3","Account Equity: "+DoubleToString(AccountEquity(),2));
      LabelTextChange(0,"Kevin4","Account Profit/Loss: "+DoubleToString(AccountEquity()-AccountBalance(),2));
      
      string Simbolo = StringSubstr(_Symbol,1,5); StringToLower(Simbolo); Simbolo = StringSubstr(_Symbol,0,1)+Simbolo;
      LabelTextChange(0,"Kevin5",Simbolo+" Profit/Loss: "+DoubleToString(ProfitSimbol,2));
      LabelTextChange(0,"Kevin6","MagicN Profit/Loss: "+DoubleToString(ProfitMagic,2));
      LabelTextChange(0,"Kevin7","Chart Profit/Loss: "+DoubleToString(ProfitChart,2));
      
      if ( AccountEquity() != 0 && AccountBalance() != 0 )
      LabelTextChange(0,"Kevin8","Drawdown Percentage: "+DoubleToString(100-(AccountEquity()/AccountBalance())*100,2));
      LabelTextChange(0,"Kevin9","Spread: "+DoubleToString(SymbolInfoInteger(_Symbol,SYMBOL_SPREAD),0));
      LabelTextChange(0,"Kevin10","Start Lot Size: "+DoubleToString(LottoDaTradare,2));
      
      
      
       }
}



void CalcolaDati(double &ProfitSimbol,double &ProfitMagic,double &ProfitChart)
{

ProfitSimbol = 0;
ProfitMagic = 0;
ProfitChart = 0;


   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
      {
         if (OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol())
         {
         ProfitChart += OrderSwap()+OrderCommission()+OrderProfit();
         }
         if ( OrderMagicNumber() == MagicNumber )
         {
         ProfitMagic += OrderSwap()+OrderCommission()+OrderProfit();
         }
         if ( OrderSymbol() == Symbol() )
         {
         ProfitSimbol += OrderSwap()+OrderCommission()+OrderProfit();
         }
      }
   }

}








bool ButtonCreate(const long              chart_ID=0,               // chart's ID
                  const string            name="Button",            // button name
                  const int               sub_window=0,             // subwindow index
                  const int               x=0,                      // X coordinate
                  const int               y=0,                      // Y coordinate
                  const int               width=50,                 // button width
                  const int               height=18,                // button height
                  const ENUM_BASE_CORNER  corner=CORNER_LEFT_UPPER, // chart corner for anchoring
                  const string            text="Button",            // text
                  const string            font="Arial",             // font
                  const int               font_size=10,             // font size
                  const color             clr=clrBlack,             // text color
                  const color             back_clr=C'236,233,216',  // background color
                  const color             border_clr=clrNONE,       // border color
                  const bool              state=false,              // pressed/released
                  const bool              back=false,               // in the background
                  const bool              selection=false,          // highlight to move
                  const bool              hidden=true,              // hidden in the object list
                  const long              z_order=0)                // priority for mouse click
  {
//--- reset the error value
   ResetLastError();
//--- create the button
   if(!ObjectCreate(chart_ID,name,OBJ_BUTTON,sub_window,0,0))
     {
     
      return(false);
     }
//--- set button coordinates
   ObjectSetInteger(chart_ID,name,OBJPROP_XDISTANCE,x);
   ObjectSetInteger(chart_ID,name,OBJPROP_YDISTANCE,y);
//--- set button size
   ObjectSetInteger(chart_ID,name,OBJPROP_XSIZE,width);
   ObjectSetInteger(chart_ID,name,OBJPROP_YSIZE,height);
//--- set the chart's corner, relative to which point coordinates are defined
   ObjectSetInteger(chart_ID,name,OBJPROP_CORNER,corner);
//--- set the text
   ObjectSetString(chart_ID,name,OBJPROP_TEXT,text);
//--- set text font
   ObjectSetString(chart_ID,name,OBJPROP_FONT,font);
//--- set font size
   ObjectSetInteger(chart_ID,name,OBJPROP_FONTSIZE,font_size);
//--- set text color
   ObjectSetInteger(chart_ID,name,OBJPROP_COLOR,clr);
//--- set background color
   ObjectSetInteger(chart_ID,name,OBJPROP_BGCOLOR,back_clr);
//--- set border color
   ObjectSetInteger(chart_ID,name,OBJPROP_BORDER_COLOR,border_clr);
//--- display in the foreground (false) or background (true)
   ObjectSetInteger(chart_ID,name,OBJPROP_BACK,back);
//--- set button state
   ObjectSetInteger(chart_ID,name,OBJPROP_STATE,state);
//--- enable (true) or disable (false) the mode of moving the button by mouse
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTABLE,selection);
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTED,selection);
//--- hide (true) or display (false) graphical object name in the object list
   ObjectSetInteger(chart_ID,name,OBJPROP_HIDDEN,hidden);
//--- set the priority for receiving the event of a mouse click in the chart
   ObjectSetInteger(chart_ID,name,OBJPROP_ZORDER,z_order);
//--- successful execution
   return(true);
  }


double PrezzoPrimoOrdineBuy()
{

double PrezzoPrimoOrdine = 0;

   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
         if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
         {
               if (OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol() && OrderType() == OP_BUY )
               {
                     if ( OrderOpenPrice() > PrezzoPrimoOrdine )
                     PrezzoPrimoOrdine = OrderOpenPrice();
               }
         }
   }
   
return PrezzoPrimoOrdine;
}


double PrezzoPrimoOrdineSell()
{

double PrezzoPrimoOrdine = 1000000000000;

   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
         if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES))
         {
               if (OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol() && OrderType() == OP_SELL )
               {
                     if ( OrderOpenPrice() < PrezzoPrimoOrdine )
                     PrezzoPrimoOrdine = OrderOpenPrice();
               }
         }
   }
   
return PrezzoPrimoOrdine;
}








//+------------------------------------------------------------------+
//| expert start function                                            |
//+------------------------------------------------------------------+
  void AverageTrailingStopFunction()
  {

double PrezziOrdiniApertiBuy = 0;
int NumeroOrdiniApertiBuy = 0;

double PrezziOrdiniApertiSell = 0;
int NumeroOrdiniApertiSell = 0;


     for(int i=OrdersTotal()-1; i >= 0; i--) 
     {
        if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) 
        {
           if (OrderSymbol()== _Symbol && OrderMagicNumber() == MagicNumber && OrderType() == OP_BUY) 
           {
           PrezziOrdiniApertiBuy += OrderOpenPrice();
           NumeroOrdiniApertiBuy++;
           }
           else if (OrderSymbol()== _Symbol && OrderMagicNumber() == MagicNumber && OrderType() == OP_SELL) 
             {
              PrezziOrdiniApertiSell += OrderOpenPrice();
              NumeroOrdiniApertiSell++;
             }
        }
     }

//Comment("Prezzo Buy: ",PrezziOrdiniApertiBuy," Numero Buy: ",NumeroOrdiniApertiBuy," Prezzo sell: ",PrezziOrdiniApertiSell," Numero Sell: ",NumeroOrdiniApertiSell);


  if ( NumeroOrdiniApertiBuy > 0 )
  {
  double PrezzoMedio = PrezziOrdiniApertiBuy / NumeroOrdiniApertiBuy;
  AverageTrailingPositions(PrezzoMedio, OP_BUY);
  }
  else
  {
  HLineMove(0,"AverageTrailingBuy",EMPTY_VALUE);
  }
  
  if ( NumeroOrdiniApertiSell > 0 )
  {
  double PrezzoMedio = PrezziOrdiniApertiSell / NumeroOrdiniApertiSell;
  AverageTrailingPositions(PrezzoMedio, OP_SELL);
  }
  else
  {
  HLineMove(0,"AverageTrailingSell",EMPTY_VALUE);
  }
  
  }
//+------------------------------------------------------------------+
//| Ñîïðîâîæäåíèå ïîçèöèè ïðîñòûì òðàëîì                             |
//+------------------------------------------------------------------+
  void AverageTrailingPositions(double PrezzoMedio, int tipo) 
  {
   double pBid, pAsk, pp;
   
   ControlloChiusuraAverageTrailing(tipo);
//----
   pp= SymbolInfoDouble(_Symbol,SYMBOL_POINT);
     if (tipo==OP_BUY) 
     {
      pBid=SymbolInfoDouble(_Symbol,SYMBOL_BID);
        if (!AverageOnlyInProfit || (pBid-PrezzoMedio)>(AverageTrailingStop+AverageBrokerCommission)*pp) 
        {
           if (ObjectGetDouble(0,"AverageTrailingBuy",OBJPROP_PRICE) <pBid-(AverageTrailingStop+AverageTrailingStep-1)*pp || ObjectGetDouble(0,"AverageTrailingBuy",OBJPROP_PRICE) == EMPTY_VALUE) 
           {
            AverageModifyStopLoss(pBid-AverageTrailingStop*pp, OP_BUY);
            return;
           }
        }
     }
     if (tipo==OP_SELL) 
     {
      pAsk=SymbolInfoDouble(_Symbol,SYMBOL_ASK);
        if (!AverageOnlyInProfit || PrezzoMedio-pAsk>(AverageTrailingStop+AverageBrokerCommission)*pp) 
        {
           if ( ObjectGetDouble(0,"AverageTrailingSell",OBJPROP_PRICE) >pAsk+(AverageTrailingStop+AverageTrailingStep-1)*pp || ObjectGetDouble(0,"AverageTrailingSell",OBJPROP_PRICE) == EMPTY_VALUE) 
           {
            AverageModifyStopLoss(pAsk+AverageTrailingStop*pp, OP_SELL);
            return;
           }
        }
     }
  }
//+------------------------------------------------------------------+
//| Ïåðåíîñ óðîâíÿ StopLoss                                          |
//| Ïàðàìåòðû:                                                       |
//|   ldStopLoss - óðîâåíü StopLoss                                  |
//+------------------------------------------------------------------+
  void AverageModifyStopLoss(double ldStopLoss,int tipo) 
  {
   bool fm;
   fm= HLineMove(0,((tipo == OP_BUY)?"AverageTrailingBuy":"AverageTrailingSell"),ldStopLoss);

  }

   void ControlloChiusuraAverageTrailing(int tipo)
   {
      if ( tipo == OP_BUY && Bid < ObjectGetDouble(0,"AverageTrailingBuy",OBJPROP_PRICE) && ObjectGetDouble(0,"AverageTrailingBuy",OBJPROP_PRICE) != EMPTY_VALUE )
      {
      EliminaOrdiniFifo(MagicNumber,tipo);
      }
      if ( tipo == OP_SELL && Ask > ObjectGetDouble(0,"AverageTrailingSell",OBJPROP_PRICE) && ObjectGetDouble(0,"AverageTrailingSell",OBJPROP_PRICE) != EMPTY_VALUE  )
      {
      EliminaOrdiniFifo(MagicNumber,tipo);
      }
   }





double ibands(int QualeBanda, int MomentoSegnale)
{
return iBands(_Symbol,BollingerBandsTimeframe,BollingerBandsPeriod,BollingerBandsDeviations,0,BollingerBandsPrice,QualeBanda,MomentoSegnale);
}



bool LabelCreate(const long              chart_ID=0,               // chart's ID
                 const string            name="Label",             // label name
                 const int               sub_window=0,             // subwindow index
                 const int               x=0,                      // X coordinate
                 const int               y=0,                      // Y coordinate
                 const ENUM_BASE_CORNER  corner=CORNER_LEFT_UPPER, // chart corner for anchoring
                 const string            text="Label",             // text
                 const string            font="Arial",             // font
                 const int               font_size=10,             // font size
                 const color             clr=clrRed,               // color
                 const double            angle=0.0,                // text slope
                 const ENUM_ANCHOR_POINT anchor=ANCHOR_LEFT_UPPER, // anchor type
                 const bool              back=false,               // in the background
                 const bool              selection=false,          // highlight to move
                 const bool              hidden=true,              // hidden in the object list
                 const long              z_order=0)                // priority for mouse click
  {
//--- reset the error value
   ResetLastError();
//--- create a text label
   if(!ObjectCreate(chart_ID,name,OBJ_LABEL,sub_window,0,0))
     {
      return(false);
     }
//--- set label coordinates
   ObjectSetInteger(chart_ID,name,OBJPROP_XDISTANCE,x);
   ObjectSetInteger(chart_ID,name,OBJPROP_YDISTANCE,y);
//--- set the chart's corner, relative to which point coordinates are defined
   ObjectSetInteger(chart_ID,name,OBJPROP_CORNER,corner);
//--- set the text
   ObjectSetString(chart_ID,name,OBJPROP_TEXT,text);
//--- set text font
   ObjectSetString(chart_ID,name,OBJPROP_FONT,font);
//--- set font size
   ObjectSetInteger(chart_ID,name,OBJPROP_FONTSIZE,font_size);
//--- set the slope angle of the text
   ObjectSetDouble(chart_ID,name,OBJPROP_ANGLE,angle);
//--- set anchor type
   ObjectSetInteger(chart_ID,name,OBJPROP_ANCHOR,anchor);
//--- set color
   ObjectSetInteger(chart_ID,name,OBJPROP_COLOR,clr);
//--- display in the foreground (false) or background (true)
   ObjectSetInteger(chart_ID,name,OBJPROP_BACK,back);
//--- enable (true) or disable (false) the mode of moving the label by mouse
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTABLE,selection);
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTED,selection);
//--- hide (true) or display (false) graphical object name in the object list
   ObjectSetInteger(chart_ID,name,OBJPROP_HIDDEN,hidden);
//--- set the priority for receiving the event of a mouse click in the chart
   ObjectSetInteger(chart_ID,name,OBJPROP_ZORDER,z_order);
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Move the text label                                              |
//+------------------------------------------------------------------+
bool LabelMove(const long   chart_ID=0,   // chart's ID
               const string name="Label", // label name
               const int    x=0,          // X coordinate
               const int    y=0)          // Y coordinate
  {
//--- reset the error value
   ResetLastError();
//--- move the text label
   if(!ObjectSetInteger(chart_ID,name,OBJPROP_XDISTANCE,x))
     {
      return(false);
     }
   if(!ObjectSetInteger(chart_ID,name,OBJPROP_YDISTANCE,y))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Change corner of the chart for binding the label                 |
//+------------------------------------------------------------------+
bool LabelChangeCorner(const long             chart_ID=0,               // chart's ID
                       const string           name="Label",             // label name
                       const ENUM_BASE_CORNER corner=CORNER_LEFT_UPPER) // chart corner for anchoring
  {
//--- reset the error value
   ResetLastError();
//--- change anchor corner
   if(!ObjectSetInteger(chart_ID,name,OBJPROP_CORNER,corner))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Change the object text                                           |
//+------------------------------------------------------------------+
bool LabelTextChange(const long   chart_ID=0,   // chart's ID
                     const string name="Label", // object name
                     const string text="Text")  // text
  {
//--- reset the error value
   ResetLastError();
//--- change object text
   if(!ObjectSetString(chart_ID,name,OBJPROP_TEXT,text))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Delete a text label                                              |
//+------------------------------------------------------------------+
bool LabelDelete(const long   chart_ID=0,   // chart's ID
                 const string name="Label") // label name
  {
//--- reset the error value
   ResetLastError();
//--- delete the label
   if(!ObjectDelete(chart_ID,name))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }



bool ButtonDelete(const long   chart_ID=0,    // chart's ID
                  const string name="Button") // button name
  {
//--- reset the error value
   ResetLastError();
//--- delete the button
   if(!ObjectDelete(chart_ID,name))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }




bool EditCreate(const long             chart_ID=0,               // chart's ID
                const string           name="Edit",              // object name
                const int              sub_window=0,             // subwindow index
                const int              x=0,                      // X coordinate
                const int              y=0,                      // Y coordinate
                const int              width=50,                 // width
                const int              height=18,                // height
                const string           text="Text",              // text
                const string           font="Arial",             // font
                const int              font_size=10,             // font size
                const ENUM_ALIGN_MODE  align=ALIGN_CENTER,       // alignment type
                const bool             read_only=false,          // ability to edit
                const ENUM_BASE_CORNER corner=CORNER_LEFT_UPPER, // chart corner for anchoring
                const color            clr=clrBlack,             // text color
                const color            back_clr=clrWhite,        // background color
                const color            border_clr=clrNONE,       // border color
                const bool             back=false,               // in the background
                const bool             selection=false,          // highlight to move
                const bool             hidden=true,              // hidden in the object list
                const long             z_order=0)                // priority for mouse click
  {
//--- reset the error value
   ResetLastError();
//--- create edit field
   if(!ObjectCreate(chart_ID,name,OBJ_EDIT,sub_window,0,0))
     {
      return(false);
     }
//--- set object coordinates
   ObjectSetInteger(chart_ID,name,OBJPROP_XDISTANCE,x);
   ObjectSetInteger(chart_ID,name,OBJPROP_YDISTANCE,y);
//--- set object size
   ObjectSetInteger(chart_ID,name,OBJPROP_XSIZE,width);
   ObjectSetInteger(chart_ID,name,OBJPROP_YSIZE,height);
//--- set the text
   ObjectSetString(chart_ID,name,OBJPROP_TEXT,text);
//--- set text font
   ObjectSetString(chart_ID,name,OBJPROP_FONT,font);
//--- set font size
   ObjectSetInteger(chart_ID,name,OBJPROP_FONTSIZE,font_size);
//--- set the type of text alignment in the object
   ObjectSetInteger(chart_ID,name,OBJPROP_ALIGN,align);
//--- enable (true) or cancel (false) read-only mode
   ObjectSetInteger(chart_ID,name,OBJPROP_READONLY,read_only);
//--- set the chart's corner, relative to which object coordinates are defined
   ObjectSetInteger(chart_ID,name,OBJPROP_CORNER,corner);
//--- set text color
   ObjectSetInteger(chart_ID,name,OBJPROP_COLOR,clr);
//--- set background color
   ObjectSetInteger(chart_ID,name,OBJPROP_BGCOLOR,back_clr);
//--- set border color
   ObjectSetInteger(chart_ID,name,OBJPROP_BORDER_COLOR,border_clr);
//--- display in the foreground (false) or background (true)
   ObjectSetInteger(chart_ID,name,OBJPROP_BACK,back);
//--- enable (true) or disable (false) the mode of moving the label by mouse
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTABLE,selection);
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTED,selection);
//--- hide (true) or display (false) graphical object name in the object list
   ObjectSetInteger(chart_ID,name,OBJPROP_HIDDEN,hidden);
//--- set the priority for receiving the event of a mouse click in the chart
   ObjectSetInteger(chart_ID,name,OBJPROP_ZORDER,z_order);
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Move Edit object                                                 |
//+------------------------------------------------------------------+
bool EditMove(const long   chart_ID=0,  // chart's ID
              const string name="Edit", // object name
              const int    x=0,         // X coordinate
              const int    y=0)         // Y coordinate
  {
//--- reset the error value
   ResetLastError();
//--- move the object
   if(!ObjectSetInteger(chart_ID,name,OBJPROP_XDISTANCE,x))
     {
      return(false);
     }
   if(!ObjectSetInteger(chart_ID,name,OBJPROP_YDISTANCE,y))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Resize Edit object                                               |
//+------------------------------------------------------------------+
bool EditChangeSize(const long   chart_ID=0,  // chart's ID
                    const string name="Edit", // object name
                    const int    width=0,     // width
                    const int    height=0)    // height
  {
//--- reset the error value
   ResetLastError();
//--- change the object size
   if(!ObjectSetInteger(chart_ID,name,OBJPROP_XSIZE,width))
     {
      return(false);
     }
   if(!ObjectSetInteger(chart_ID,name,OBJPROP_YSIZE,height))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Change Edit object's text                                        |
//+------------------------------------------------------------------+
bool EditTextChange(const long   chart_ID=0,  // chart's ID
                    const string name="Edit", // object name
                    const string text="Text") // text
  {
//--- reset the error value
   ResetLastError();
//--- change object text
   if(!ObjectSetString(chart_ID,name,OBJPROP_TEXT,text))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Return Edit object text                                          |
//+------------------------------------------------------------------+
bool EditTextGet(string      &text,        // text
                 const long   chart_ID=0,  // chart's ID
                 const string name="Edit") // object name
  {
//--- reset the error value
   ResetLastError();
//--- get object text
   if(!ObjectGetString(chart_ID,name,OBJPROP_TEXT,0,text))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Delete Edit object                                               |
//+------------------------------------------------------------------+
bool EditDelete(const long   chart_ID=0,  // chart's ID
                const string name="Edit") // object name
  {
//--- reset the error value
   ResetLastError();
//--- delete the label
   if(!ObjectDelete(chart_ID,name))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }



bool RectLabelCreate(const long             chart_ID=0,               // chart's ID
                     const string           name="RectLabel",         // label name
                     const int              sub_window=0,             // subwindow index
                     const int              x=0,                      // X coordinate
                     const int              y=0,                      // Y coordinate
                     const int              width=50,                 // width
                     const int              height=18,                // height
                     const color            back_clr=C'236,233,216',  // background color
                     const ENUM_BORDER_TYPE border=BORDER_SUNKEN,     // border type
                     const ENUM_BASE_CORNER corner=CORNER_LEFT_UPPER, // chart corner for anchoring
                     const color            clr=clrRed,               // flat border color (Flat)
                     const ENUM_LINE_STYLE  style=STYLE_SOLID,        // flat border style
                     const int              line_width=1,             // flat border width
                     const bool             back=false,               // in the background
                     const bool             selection=false,          // highlight to move
                     const bool             hidden=true,              // hidden in the object list
                     const long             z_order=0)                // priority for mouse click
  {
//--- reset the error value
   ResetLastError();
//--- create a rectangle label
   if(!ObjectCreate(chart_ID,name,OBJ_RECTANGLE_LABEL,sub_window,0,0))
     {
      return(false);
     }
//--- set label coordinates
   ObjectSetInteger(chart_ID,name,OBJPROP_XDISTANCE,x);
   ObjectSetInteger(chart_ID,name,OBJPROP_YDISTANCE,y);
//--- set label size
   ObjectSetInteger(chart_ID,name,OBJPROP_XSIZE,width);
   ObjectSetInteger(chart_ID,name,OBJPROP_YSIZE,height);
//--- set background color
   ObjectSetInteger(chart_ID,name,OBJPROP_BGCOLOR,back_clr);
//--- set border type
   ObjectSetInteger(chart_ID,name,OBJPROP_BORDER_TYPE,border);
//--- set the chart's corner, relative to which point coordinates are defined
   ObjectSetInteger(chart_ID,name,OBJPROP_CORNER,corner);
//--- set flat border color (in Flat mode)
   ObjectSetInteger(chart_ID,name,OBJPROP_COLOR,clr);
//--- set flat border line style
   ObjectSetInteger(chart_ID,name,OBJPROP_STYLE,style);
//--- set flat border width
   ObjectSetInteger(chart_ID,name,OBJPROP_WIDTH,line_width);
//--- display in the foreground (false) or background (true)
   ObjectSetInteger(chart_ID,name,OBJPROP_BACK,back);
//--- enable (true) or disable (false) the mode of moving the label by mouse
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTABLE,selection);
   ObjectSetInteger(chart_ID,name,OBJPROP_SELECTED,selection);
//--- hide (true) or display (false) graphical object name in the object list
   ObjectSetInteger(chart_ID,name,OBJPROP_HIDDEN,hidden);
//--- set the priority for receiving the event of a mouse click in the chart
   ObjectSetInteger(chart_ID,name,OBJPROP_ZORDER,z_order);
//--- successful execution
   return(true);
  }
//+------------------------------------------------------------------+
//| Move rectangle label                                             |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Delete the rectangle label                                       |
//+------------------------------------------------------------------+
bool RectLabelDelete(const long   chart_ID=0,       // chart's ID
                     const string name="RectLabel") // label name
  {
//--- reset the error value
   ResetLastError();
//--- delete the label
   if(!ObjectDelete(chart_ID,name))
     {
      return(false);
     }
//--- successful execution
   return(true);
  }





//Cambia Magic Number
//Cambia tutti i "Dark Venus" in "nome del robot"
//Cambia la Coppia "EURUSD" per cui da Errore se lo inserisci in un altra coppia: lo trovi cosi:   if ( !(StringFind(_Symbol,"EURUSD") > -1 









